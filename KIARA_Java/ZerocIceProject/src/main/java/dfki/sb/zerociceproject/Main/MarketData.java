// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `benchmark.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package dfki.sb.zerociceproject.Main;

public class MarketData implements java.lang.Cloneable, java.io.Serializable
{
    public boolean isEcho;

    public int counter;

    public int securityID;

    public double applVersionID;

    public double messageType;

    public double senderCompID;

    public int msgSeqNum;

    public int sendingTime;

    public int tradeDate;

    public MarketDataEntry[] mdEntries;

    public MarketData()
    {
    }

    public MarketData(boolean isEcho, int counter, int securityID, double applVersionID, double messageType, double senderCompID, int msgSeqNum, int sendingTime, int tradeDate, MarketDataEntry[] mdEntries)
    {
        this.isEcho = isEcho;
        this.counter = counter;
        this.securityID = securityID;
        this.applVersionID = applVersionID;
        this.messageType = messageType;
        this.senderCompID = senderCompID;
        this.msgSeqNum = msgSeqNum;
        this.sendingTime = sendingTime;
        this.tradeDate = tradeDate;
        this.mdEntries = mdEntries;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        MarketData _r = null;
        if(rhs instanceof MarketData)
        {
            _r = (MarketData)rhs;
        }

        if(_r != null)
        {
            if(isEcho != _r.isEcho)
            {
                return false;
            }
            if(counter != _r.counter)
            {
                return false;
            }
            if(securityID != _r.securityID)
            {
                return false;
            }
            if(applVersionID != _r.applVersionID)
            {
                return false;
            }
            if(messageType != _r.messageType)
            {
                return false;
            }
            if(senderCompID != _r.senderCompID)
            {
                return false;
            }
            if(msgSeqNum != _r.msgSeqNum)
            {
                return false;
            }
            if(sendingTime != _r.sendingTime)
            {
                return false;
            }
            if(tradeDate != _r.tradeDate)
            {
                return false;
            }
            if(!java.util.Arrays.equals(mdEntries, _r.mdEntries))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::Main::MarketData");
        __h = IceInternal.HashUtil.hashAdd(__h, isEcho);
        __h = IceInternal.HashUtil.hashAdd(__h, counter);
        __h = IceInternal.HashUtil.hashAdd(__h, securityID);
        __h = IceInternal.HashUtil.hashAdd(__h, applVersionID);
        __h = IceInternal.HashUtil.hashAdd(__h, messageType);
        __h = IceInternal.HashUtil.hashAdd(__h, senderCompID);
        __h = IceInternal.HashUtil.hashAdd(__h, msgSeqNum);
        __h = IceInternal.HashUtil.hashAdd(__h, sendingTime);
        __h = IceInternal.HashUtil.hashAdd(__h, tradeDate);
        __h = IceInternal.HashUtil.hashAdd(__h, mdEntries);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeBool(isEcho);
        __os.writeInt(counter);
        __os.writeInt(securityID);
        __os.writeDouble(applVersionID);
        __os.writeDouble(messageType);
        __os.writeDouble(senderCompID);
        __os.writeInt(msgSeqNum);
        __os.writeInt(sendingTime);
        __os.writeInt(tradeDate);
        MarketDataEntrySeqHelper.write(__os, mdEntries);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        isEcho = __is.readBool();
        counter = __is.readInt();
        securityID = __is.readInt();
        applVersionID = __is.readDouble();
        messageType = __is.readDouble();
        senderCompID = __is.readDouble();
        msgSeqNum = __is.readInt();
        sendingTime = __is.readInt();
        tradeDate = __is.readInt();
        mdEntries = MarketDataEntrySeqHelper.read(__is);
    }

    public static final long serialVersionUID = 1951130902L;
}
