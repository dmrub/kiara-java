/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package benchmark;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RelatedSym implements org.apache.thrift.TBase<RelatedSym, RelatedSym._Fields>, java.io.Serializable, Cloneable, Comparable<RelatedSym> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RelatedSym");

  private static final org.apache.thrift.protocol.TField SYMBOL_FIELD_DESC = new org.apache.thrift.protocol.TField("symbol", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField ORDER_QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("orderQuantity", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField SIDE_FIELD_DESC = new org.apache.thrift.protocol.TField("side", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TRANSACT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("transactTime", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField QUOTE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("quoteType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SECURITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("securityID", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField SECURITY_IDSOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("securityIDSource", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField DUMMY1_FIELD_DESC = new org.apache.thrift.protocol.TField("dummy1", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField DUMMY2_FIELD_DESC = new org.apache.thrift.protocol.TField("dummy2", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RelatedSymStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RelatedSymTupleSchemeFactory());
  }

  public double symbol; // required
  public long orderQuantity; // required
  public int side; // required
  public long transactTime; // required
  public int quoteType; // required
  public int securityID; // required
  public int securityIDSource; // required
  public double dummy1; // required
  public int dummy2; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SYMBOL((short)1, "symbol"),
    ORDER_QUANTITY((short)2, "orderQuantity"),
    SIDE((short)3, "side"),
    TRANSACT_TIME((short)4, "transactTime"),
    QUOTE_TYPE((short)5, "quoteType"),
    SECURITY_ID((short)6, "securityID"),
    SECURITY_IDSOURCE((short)7, "securityIDSource"),
    DUMMY1((short)8, "dummy1"),
    DUMMY2((short)9, "dummy2");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SYMBOL
          return SYMBOL;
        case 2: // ORDER_QUANTITY
          return ORDER_QUANTITY;
        case 3: // SIDE
          return SIDE;
        case 4: // TRANSACT_TIME
          return TRANSACT_TIME;
        case 5: // QUOTE_TYPE
          return QUOTE_TYPE;
        case 6: // SECURITY_ID
          return SECURITY_ID;
        case 7: // SECURITY_IDSOURCE
          return SECURITY_IDSOURCE;
        case 8: // DUMMY1
          return DUMMY1;
        case 9: // DUMMY2
          return DUMMY2;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SYMBOL_ISSET_ID = 0;
  private static final int __ORDERQUANTITY_ISSET_ID = 1;
  private static final int __SIDE_ISSET_ID = 2;
  private static final int __TRANSACTTIME_ISSET_ID = 3;
  private static final int __QUOTETYPE_ISSET_ID = 4;
  private static final int __SECURITYID_ISSET_ID = 5;
  private static final int __SECURITYIDSOURCE_ISSET_ID = 6;
  private static final int __DUMMY1_ISSET_ID = 7;
  private static final int __DUMMY2_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SYMBOL, new org.apache.thrift.meta_data.FieldMetaData("symbol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ORDER_QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("orderQuantity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SIDE, new org.apache.thrift.meta_data.FieldMetaData("side", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRANSACT_TIME, new org.apache.thrift.meta_data.FieldMetaData("transactTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.QUOTE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("quoteType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SECURITY_ID, new org.apache.thrift.meta_data.FieldMetaData("securityID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SECURITY_IDSOURCE, new org.apache.thrift.meta_data.FieldMetaData("securityIDSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DUMMY1, new org.apache.thrift.meta_data.FieldMetaData("dummy1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DUMMY2, new org.apache.thrift.meta_data.FieldMetaData("dummy2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RelatedSym.class, metaDataMap);
  }

  public RelatedSym() {
  }

  public RelatedSym(
    double symbol,
    long orderQuantity,
    int side,
    long transactTime,
    int quoteType,
    int securityID,
    int securityIDSource,
    double dummy1,
    int dummy2)
  {
    this();
    this.symbol = symbol;
    setSymbolIsSet(true);
    this.orderQuantity = orderQuantity;
    setOrderQuantityIsSet(true);
    this.side = side;
    setSideIsSet(true);
    this.transactTime = transactTime;
    setTransactTimeIsSet(true);
    this.quoteType = quoteType;
    setQuoteTypeIsSet(true);
    this.securityID = securityID;
    setSecurityIDIsSet(true);
    this.securityIDSource = securityIDSource;
    setSecurityIDSourceIsSet(true);
    this.dummy1 = dummy1;
    setDummy1IsSet(true);
    this.dummy2 = dummy2;
    setDummy2IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RelatedSym(RelatedSym other) {
    __isset_bitfield = other.__isset_bitfield;
    this.symbol = other.symbol;
    this.orderQuantity = other.orderQuantity;
    this.side = other.side;
    this.transactTime = other.transactTime;
    this.quoteType = other.quoteType;
    this.securityID = other.securityID;
    this.securityIDSource = other.securityIDSource;
    this.dummy1 = other.dummy1;
    this.dummy2 = other.dummy2;
  }

  public RelatedSym deepCopy() {
    return new RelatedSym(this);
  }

  @Override
  public void clear() {
    setSymbolIsSet(false);
    this.symbol = 0.0;
    setOrderQuantityIsSet(false);
    this.orderQuantity = 0;
    setSideIsSet(false);
    this.side = 0;
    setTransactTimeIsSet(false);
    this.transactTime = 0;
    setQuoteTypeIsSet(false);
    this.quoteType = 0;
    setSecurityIDIsSet(false);
    this.securityID = 0;
    setSecurityIDSourceIsSet(false);
    this.securityIDSource = 0;
    setDummy1IsSet(false);
    this.dummy1 = 0.0;
    setDummy2IsSet(false);
    this.dummy2 = 0;
  }

  public double getSymbol() {
    return this.symbol;
  }

  public RelatedSym setSymbol(double symbol) {
    this.symbol = symbol;
    setSymbolIsSet(true);
    return this;
  }

  public void unsetSymbol() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SYMBOL_ISSET_ID);
  }

  /** Returns true if field symbol is set (has been assigned a value) and false otherwise */
  public boolean isSetSymbol() {
    return EncodingUtils.testBit(__isset_bitfield, __SYMBOL_ISSET_ID);
  }

  public void setSymbolIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SYMBOL_ISSET_ID, value);
  }

  public long getOrderQuantity() {
    return this.orderQuantity;
  }

  public RelatedSym setOrderQuantity(long orderQuantity) {
    this.orderQuantity = orderQuantity;
    setOrderQuantityIsSet(true);
    return this;
  }

  public void unsetOrderQuantity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERQUANTITY_ISSET_ID);
  }

  /** Returns true if field orderQuantity is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderQuantity() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERQUANTITY_ISSET_ID);
  }

  public void setOrderQuantityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERQUANTITY_ISSET_ID, value);
  }

  public int getSide() {
    return this.side;
  }

  public RelatedSym setSide(int side) {
    this.side = side;
    setSideIsSet(true);
    return this;
  }

  public void unsetSide() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIDE_ISSET_ID);
  }

  /** Returns true if field side is set (has been assigned a value) and false otherwise */
  public boolean isSetSide() {
    return EncodingUtils.testBit(__isset_bitfield, __SIDE_ISSET_ID);
  }

  public void setSideIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIDE_ISSET_ID, value);
  }

  public long getTransactTime() {
    return this.transactTime;
  }

  public RelatedSym setTransactTime(long transactTime) {
    this.transactTime = transactTime;
    setTransactTimeIsSet(true);
    return this;
  }

  public void unsetTransactTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRANSACTTIME_ISSET_ID);
  }

  /** Returns true if field transactTime is set (has been assigned a value) and false otherwise */
  public boolean isSetTransactTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TRANSACTTIME_ISSET_ID);
  }

  public void setTransactTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRANSACTTIME_ISSET_ID, value);
  }

  public int getQuoteType() {
    return this.quoteType;
  }

  public RelatedSym setQuoteType(int quoteType) {
    this.quoteType = quoteType;
    setQuoteTypeIsSet(true);
    return this;
  }

  public void unsetQuoteType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUOTETYPE_ISSET_ID);
  }

  /** Returns true if field quoteType is set (has been assigned a value) and false otherwise */
  public boolean isSetQuoteType() {
    return EncodingUtils.testBit(__isset_bitfield, __QUOTETYPE_ISSET_ID);
  }

  public void setQuoteTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUOTETYPE_ISSET_ID, value);
  }

  public int getSecurityID() {
    return this.securityID;
  }

  public RelatedSym setSecurityID(int securityID) {
    this.securityID = securityID;
    setSecurityIDIsSet(true);
    return this;
  }

  public void unsetSecurityID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SECURITYID_ISSET_ID);
  }

  /** Returns true if field securityID is set (has been assigned a value) and false otherwise */
  public boolean isSetSecurityID() {
    return EncodingUtils.testBit(__isset_bitfield, __SECURITYID_ISSET_ID);
  }

  public void setSecurityIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SECURITYID_ISSET_ID, value);
  }

  public int getSecurityIDSource() {
    return this.securityIDSource;
  }

  public RelatedSym setSecurityIDSource(int securityIDSource) {
    this.securityIDSource = securityIDSource;
    setSecurityIDSourceIsSet(true);
    return this;
  }

  public void unsetSecurityIDSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SECURITYIDSOURCE_ISSET_ID);
  }

  /** Returns true if field securityIDSource is set (has been assigned a value) and false otherwise */
  public boolean isSetSecurityIDSource() {
    return EncodingUtils.testBit(__isset_bitfield, __SECURITYIDSOURCE_ISSET_ID);
  }

  public void setSecurityIDSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SECURITYIDSOURCE_ISSET_ID, value);
  }

  public double getDummy1() {
    return this.dummy1;
  }

  public RelatedSym setDummy1(double dummy1) {
    this.dummy1 = dummy1;
    setDummy1IsSet(true);
    return this;
  }

  public void unsetDummy1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DUMMY1_ISSET_ID);
  }

  /** Returns true if field dummy1 is set (has been assigned a value) and false otherwise */
  public boolean isSetDummy1() {
    return EncodingUtils.testBit(__isset_bitfield, __DUMMY1_ISSET_ID);
  }

  public void setDummy1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DUMMY1_ISSET_ID, value);
  }

  public int getDummy2() {
    return this.dummy2;
  }

  public RelatedSym setDummy2(int dummy2) {
    this.dummy2 = dummy2;
    setDummy2IsSet(true);
    return this;
  }

  public void unsetDummy2() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DUMMY2_ISSET_ID);
  }

  /** Returns true if field dummy2 is set (has been assigned a value) and false otherwise */
  public boolean isSetDummy2() {
    return EncodingUtils.testBit(__isset_bitfield, __DUMMY2_ISSET_ID);
  }

  public void setDummy2IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DUMMY2_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SYMBOL:
      if (value == null) {
        unsetSymbol();
      } else {
        setSymbol((Double)value);
      }
      break;

    case ORDER_QUANTITY:
      if (value == null) {
        unsetOrderQuantity();
      } else {
        setOrderQuantity((Long)value);
      }
      break;

    case SIDE:
      if (value == null) {
        unsetSide();
      } else {
        setSide((Integer)value);
      }
      break;

    case TRANSACT_TIME:
      if (value == null) {
        unsetTransactTime();
      } else {
        setTransactTime((Long)value);
      }
      break;

    case QUOTE_TYPE:
      if (value == null) {
        unsetQuoteType();
      } else {
        setQuoteType((Integer)value);
      }
      break;

    case SECURITY_ID:
      if (value == null) {
        unsetSecurityID();
      } else {
        setSecurityID((Integer)value);
      }
      break;

    case SECURITY_IDSOURCE:
      if (value == null) {
        unsetSecurityIDSource();
      } else {
        setSecurityIDSource((Integer)value);
      }
      break;

    case DUMMY1:
      if (value == null) {
        unsetDummy1();
      } else {
        setDummy1((Double)value);
      }
      break;

    case DUMMY2:
      if (value == null) {
        unsetDummy2();
      } else {
        setDummy2((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SYMBOL:
      return Double.valueOf(getSymbol());

    case ORDER_QUANTITY:
      return Long.valueOf(getOrderQuantity());

    case SIDE:
      return Integer.valueOf(getSide());

    case TRANSACT_TIME:
      return Long.valueOf(getTransactTime());

    case QUOTE_TYPE:
      return Integer.valueOf(getQuoteType());

    case SECURITY_ID:
      return Integer.valueOf(getSecurityID());

    case SECURITY_IDSOURCE:
      return Integer.valueOf(getSecurityIDSource());

    case DUMMY1:
      return Double.valueOf(getDummy1());

    case DUMMY2:
      return Integer.valueOf(getDummy2());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SYMBOL:
      return isSetSymbol();
    case ORDER_QUANTITY:
      return isSetOrderQuantity();
    case SIDE:
      return isSetSide();
    case TRANSACT_TIME:
      return isSetTransactTime();
    case QUOTE_TYPE:
      return isSetQuoteType();
    case SECURITY_ID:
      return isSetSecurityID();
    case SECURITY_IDSOURCE:
      return isSetSecurityIDSource();
    case DUMMY1:
      return isSetDummy1();
    case DUMMY2:
      return isSetDummy2();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RelatedSym)
      return this.equals((RelatedSym)that);
    return false;
  }

  public boolean equals(RelatedSym that) {
    if (that == null)
      return false;

    boolean this_present_symbol = true;
    boolean that_present_symbol = true;
    if (this_present_symbol || that_present_symbol) {
      if (!(this_present_symbol && that_present_symbol))
        return false;
      if (this.symbol != that.symbol)
        return false;
    }

    boolean this_present_orderQuantity = true;
    boolean that_present_orderQuantity = true;
    if (this_present_orderQuantity || that_present_orderQuantity) {
      if (!(this_present_orderQuantity && that_present_orderQuantity))
        return false;
      if (this.orderQuantity != that.orderQuantity)
        return false;
    }

    boolean this_present_side = true;
    boolean that_present_side = true;
    if (this_present_side || that_present_side) {
      if (!(this_present_side && that_present_side))
        return false;
      if (this.side != that.side)
        return false;
    }

    boolean this_present_transactTime = true;
    boolean that_present_transactTime = true;
    if (this_present_transactTime || that_present_transactTime) {
      if (!(this_present_transactTime && that_present_transactTime))
        return false;
      if (this.transactTime != that.transactTime)
        return false;
    }

    boolean this_present_quoteType = true;
    boolean that_present_quoteType = true;
    if (this_present_quoteType || that_present_quoteType) {
      if (!(this_present_quoteType && that_present_quoteType))
        return false;
      if (this.quoteType != that.quoteType)
        return false;
    }

    boolean this_present_securityID = true;
    boolean that_present_securityID = true;
    if (this_present_securityID || that_present_securityID) {
      if (!(this_present_securityID && that_present_securityID))
        return false;
      if (this.securityID != that.securityID)
        return false;
    }

    boolean this_present_securityIDSource = true;
    boolean that_present_securityIDSource = true;
    if (this_present_securityIDSource || that_present_securityIDSource) {
      if (!(this_present_securityIDSource && that_present_securityIDSource))
        return false;
      if (this.securityIDSource != that.securityIDSource)
        return false;
    }

    boolean this_present_dummy1 = true;
    boolean that_present_dummy1 = true;
    if (this_present_dummy1 || that_present_dummy1) {
      if (!(this_present_dummy1 && that_present_dummy1))
        return false;
      if (this.dummy1 != that.dummy1)
        return false;
    }

    boolean this_present_dummy2 = true;
    boolean that_present_dummy2 = true;
    if (this_present_dummy2 || that_present_dummy2) {
      if (!(this_present_dummy2 && that_present_dummy2))
        return false;
      if (this.dummy2 != that.dummy2)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(RelatedSym other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSymbol()).compareTo(other.isSetSymbol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSymbol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.symbol, other.symbol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderQuantity()).compareTo(other.isSetOrderQuantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderQuantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderQuantity, other.orderQuantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSide()).compareTo(other.isSetSide());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSide()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.side, other.side);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransactTime()).compareTo(other.isSetTransactTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransactTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transactTime, other.transactTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuoteType()).compareTo(other.isSetQuoteType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuoteType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quoteType, other.quoteType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecurityID()).compareTo(other.isSetSecurityID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecurityID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.securityID, other.securityID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecurityIDSource()).compareTo(other.isSetSecurityIDSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecurityIDSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.securityIDSource, other.securityIDSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDummy1()).compareTo(other.isSetDummy1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDummy1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dummy1, other.dummy1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDummy2()).compareTo(other.isSetDummy2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDummy2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dummy2, other.dummy2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RelatedSym(");
    boolean first = true;

    sb.append("symbol:");
    sb.append(this.symbol);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderQuantity:");
    sb.append(this.orderQuantity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("side:");
    sb.append(this.side);
    first = false;
    if (!first) sb.append(", ");
    sb.append("transactTime:");
    sb.append(this.transactTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("quoteType:");
    sb.append(this.quoteType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("securityID:");
    sb.append(this.securityID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("securityIDSource:");
    sb.append(this.securityIDSource);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dummy1:");
    sb.append(this.dummy1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dummy2:");
    sb.append(this.dummy2);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RelatedSymStandardSchemeFactory implements SchemeFactory {
    public RelatedSymStandardScheme getScheme() {
      return new RelatedSymStandardScheme();
    }
  }

  private static class RelatedSymStandardScheme extends StandardScheme<RelatedSym> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RelatedSym struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SYMBOL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.symbol = iprot.readDouble();
              struct.setSymbolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORDER_QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.orderQuantity = iprot.readI64();
              struct.setOrderQuantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SIDE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.side = iprot.readI32();
              struct.setSideIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TRANSACT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.transactTime = iprot.readI64();
              struct.setTransactTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // QUOTE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.quoteType = iprot.readI32();
              struct.setQuoteTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SECURITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.securityID = iprot.readI32();
              struct.setSecurityIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SECURITY_IDSOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.securityIDSource = iprot.readI32();
              struct.setSecurityIDSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DUMMY1
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dummy1 = iprot.readDouble();
              struct.setDummy1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DUMMY2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dummy2 = iprot.readI32();
              struct.setDummy2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RelatedSym struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SYMBOL_FIELD_DESC);
      oprot.writeDouble(struct.symbol);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORDER_QUANTITY_FIELD_DESC);
      oprot.writeI64(struct.orderQuantity);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIDE_FIELD_DESC);
      oprot.writeI32(struct.side);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRANSACT_TIME_FIELD_DESC);
      oprot.writeI64(struct.transactTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUOTE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.quoteType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SECURITY_ID_FIELD_DESC);
      oprot.writeI32(struct.securityID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SECURITY_IDSOURCE_FIELD_DESC);
      oprot.writeI32(struct.securityIDSource);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DUMMY1_FIELD_DESC);
      oprot.writeDouble(struct.dummy1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DUMMY2_FIELD_DESC);
      oprot.writeI32(struct.dummy2);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RelatedSymTupleSchemeFactory implements SchemeFactory {
    public RelatedSymTupleScheme getScheme() {
      return new RelatedSymTupleScheme();
    }
  }

  private static class RelatedSymTupleScheme extends TupleScheme<RelatedSym> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RelatedSym struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSymbol()) {
        optionals.set(0);
      }
      if (struct.isSetOrderQuantity()) {
        optionals.set(1);
      }
      if (struct.isSetSide()) {
        optionals.set(2);
      }
      if (struct.isSetTransactTime()) {
        optionals.set(3);
      }
      if (struct.isSetQuoteType()) {
        optionals.set(4);
      }
      if (struct.isSetSecurityID()) {
        optionals.set(5);
      }
      if (struct.isSetSecurityIDSource()) {
        optionals.set(6);
      }
      if (struct.isSetDummy1()) {
        optionals.set(7);
      }
      if (struct.isSetDummy2()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetSymbol()) {
        oprot.writeDouble(struct.symbol);
      }
      if (struct.isSetOrderQuantity()) {
        oprot.writeI64(struct.orderQuantity);
      }
      if (struct.isSetSide()) {
        oprot.writeI32(struct.side);
      }
      if (struct.isSetTransactTime()) {
        oprot.writeI64(struct.transactTime);
      }
      if (struct.isSetQuoteType()) {
        oprot.writeI32(struct.quoteType);
      }
      if (struct.isSetSecurityID()) {
        oprot.writeI32(struct.securityID);
      }
      if (struct.isSetSecurityIDSource()) {
        oprot.writeI32(struct.securityIDSource);
      }
      if (struct.isSetDummy1()) {
        oprot.writeDouble(struct.dummy1);
      }
      if (struct.isSetDummy2()) {
        oprot.writeI32(struct.dummy2);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RelatedSym struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.symbol = iprot.readDouble();
        struct.setSymbolIsSet(true);
      }
      if (incoming.get(1)) {
        struct.orderQuantity = iprot.readI64();
        struct.setOrderQuantityIsSet(true);
      }
      if (incoming.get(2)) {
        struct.side = iprot.readI32();
        struct.setSideIsSet(true);
      }
      if (incoming.get(3)) {
        struct.transactTime = iprot.readI64();
        struct.setTransactTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.quoteType = iprot.readI32();
        struct.setQuoteTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.securityID = iprot.readI32();
        struct.setSecurityIDIsSet(true);
      }
      if (incoming.get(6)) {
        struct.securityIDSource = iprot.readI32();
        struct.setSecurityIDSourceIsSet(true);
      }
      if (incoming.get(7)) {
        struct.dummy1 = iprot.readDouble();
        struct.setDummy1IsSet(true);
      }
      if (incoming.get(8)) {
        struct.dummy2 = iprot.readI32();
        struct.setDummy2IsSet(true);
      }
    }
  }

}

