/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package benchmark;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MarketData implements org.apache.thrift.TBase<MarketData, MarketData._Fields>, java.io.Serializable, Cloneable, Comparable<MarketData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MarketData");

  private static final org.apache.thrift.protocol.TField IS_ECHO_FIELD_DESC = new org.apache.thrift.protocol.TField("isEcho", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField COUNTER_FIELD_DESC = new org.apache.thrift.protocol.TField("counter", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SECURITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("securityID", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField APPL_VERSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applVersionID", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField MESSAGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("messageType", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField SENDER_COMP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("senderCompID", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField MSG_SEQ_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("msgSeqNum", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField SENDING_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("sendingTime", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField TRADE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeDate", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField MD_ENTRIES_FIELD_DESC = new org.apache.thrift.protocol.TField("mdEntries", org.apache.thrift.protocol.TType.LIST, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MarketDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MarketDataTupleSchemeFactory());
  }

  public boolean isEcho; // required
  public int counter; // required
  public int securityID; // required
  public double applVersionID; // required
  public double messageType; // required
  public double senderCompID; // required
  public int msgSeqNum; // required
  public int sendingTime; // required
  public int tradeDate; // required
  public List<MarketDataEntry> mdEntries; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IS_ECHO((short)1, "isEcho"),
    COUNTER((short)2, "counter"),
    SECURITY_ID((short)3, "securityID"),
    APPL_VERSION_ID((short)4, "applVersionID"),
    MESSAGE_TYPE((short)5, "messageType"),
    SENDER_COMP_ID((short)6, "senderCompID"),
    MSG_SEQ_NUM((short)7, "msgSeqNum"),
    SENDING_TIME((short)8, "sendingTime"),
    TRADE_DATE((short)9, "tradeDate"),
    MD_ENTRIES((short)10, "mdEntries");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IS_ECHO
          return IS_ECHO;
        case 2: // COUNTER
          return COUNTER;
        case 3: // SECURITY_ID
          return SECURITY_ID;
        case 4: // APPL_VERSION_ID
          return APPL_VERSION_ID;
        case 5: // MESSAGE_TYPE
          return MESSAGE_TYPE;
        case 6: // SENDER_COMP_ID
          return SENDER_COMP_ID;
        case 7: // MSG_SEQ_NUM
          return MSG_SEQ_NUM;
        case 8: // SENDING_TIME
          return SENDING_TIME;
        case 9: // TRADE_DATE
          return TRADE_DATE;
        case 10: // MD_ENTRIES
          return MD_ENTRIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISECHO_ISSET_ID = 0;
  private static final int __COUNTER_ISSET_ID = 1;
  private static final int __SECURITYID_ISSET_ID = 2;
  private static final int __APPLVERSIONID_ISSET_ID = 3;
  private static final int __MESSAGETYPE_ISSET_ID = 4;
  private static final int __SENDERCOMPID_ISSET_ID = 5;
  private static final int __MSGSEQNUM_ISSET_ID = 6;
  private static final int __SENDINGTIME_ISSET_ID = 7;
  private static final int __TRADEDATE_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IS_ECHO, new org.apache.thrift.meta_data.FieldMetaData("isEcho", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.COUNTER, new org.apache.thrift.meta_data.FieldMetaData("counter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SECURITY_ID, new org.apache.thrift.meta_data.FieldMetaData("securityID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APPL_VERSION_ID, new org.apache.thrift.meta_data.FieldMetaData("applVersionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MESSAGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("messageType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SENDER_COMP_ID, new org.apache.thrift.meta_data.FieldMetaData("senderCompID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MSG_SEQ_NUM, new org.apache.thrift.meta_data.FieldMetaData("msgSeqNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SENDING_TIME, new org.apache.thrift.meta_data.FieldMetaData("sendingTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRADE_DATE, new org.apache.thrift.meta_data.FieldMetaData("tradeDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MD_ENTRIES, new org.apache.thrift.meta_data.FieldMetaData("mdEntries", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MarketDataEntry.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MarketData.class, metaDataMap);
  }

  public MarketData() {
  }

  public MarketData(
    boolean isEcho,
    int counter,
    int securityID,
    double applVersionID,
    double messageType,
    double senderCompID,
    int msgSeqNum,
    int sendingTime,
    int tradeDate,
    List<MarketDataEntry> mdEntries)
  {
    this();
    this.isEcho = isEcho;
    setIsEchoIsSet(true);
    this.counter = counter;
    setCounterIsSet(true);
    this.securityID = securityID;
    setSecurityIDIsSet(true);
    this.applVersionID = applVersionID;
    setApplVersionIDIsSet(true);
    this.messageType = messageType;
    setMessageTypeIsSet(true);
    this.senderCompID = senderCompID;
    setSenderCompIDIsSet(true);
    this.msgSeqNum = msgSeqNum;
    setMsgSeqNumIsSet(true);
    this.sendingTime = sendingTime;
    setSendingTimeIsSet(true);
    this.tradeDate = tradeDate;
    setTradeDateIsSet(true);
    this.mdEntries = mdEntries;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MarketData(MarketData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.isEcho = other.isEcho;
    this.counter = other.counter;
    this.securityID = other.securityID;
    this.applVersionID = other.applVersionID;
    this.messageType = other.messageType;
    this.senderCompID = other.senderCompID;
    this.msgSeqNum = other.msgSeqNum;
    this.sendingTime = other.sendingTime;
    this.tradeDate = other.tradeDate;
    if (other.isSetMdEntries()) {
      List<MarketDataEntry> __this__mdEntries = new ArrayList<MarketDataEntry>(other.mdEntries.size());
      for (MarketDataEntry other_element : other.mdEntries) {
        __this__mdEntries.add(new MarketDataEntry(other_element));
      }
      this.mdEntries = __this__mdEntries;
    }
  }

  public MarketData deepCopy() {
    return new MarketData(this);
  }

  @Override
  public void clear() {
    setIsEchoIsSet(false);
    this.isEcho = false;
    setCounterIsSet(false);
    this.counter = 0;
    setSecurityIDIsSet(false);
    this.securityID = 0;
    setApplVersionIDIsSet(false);
    this.applVersionID = 0.0;
    setMessageTypeIsSet(false);
    this.messageType = 0.0;
    setSenderCompIDIsSet(false);
    this.senderCompID = 0.0;
    setMsgSeqNumIsSet(false);
    this.msgSeqNum = 0;
    setSendingTimeIsSet(false);
    this.sendingTime = 0;
    setTradeDateIsSet(false);
    this.tradeDate = 0;
    this.mdEntries = null;
  }

  public boolean isIsEcho() {
    return this.isEcho;
  }

  public MarketData setIsEcho(boolean isEcho) {
    this.isEcho = isEcho;
    setIsEchoIsSet(true);
    return this;
  }

  public void unsetIsEcho() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISECHO_ISSET_ID);
  }

  /** Returns true if field isEcho is set (has been assigned a value) and false otherwise */
  public boolean isSetIsEcho() {
    return EncodingUtils.testBit(__isset_bitfield, __ISECHO_ISSET_ID);
  }

  public void setIsEchoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISECHO_ISSET_ID, value);
  }

  public int getCounter() {
    return this.counter;
  }

  public MarketData setCounter(int counter) {
    this.counter = counter;
    setCounterIsSet(true);
    return this;
  }

  public void unsetCounter() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNTER_ISSET_ID);
  }

  /** Returns true if field counter is set (has been assigned a value) and false otherwise */
  public boolean isSetCounter() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNTER_ISSET_ID);
  }

  public void setCounterIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNTER_ISSET_ID, value);
  }

  public int getSecurityID() {
    return this.securityID;
  }

  public MarketData setSecurityID(int securityID) {
    this.securityID = securityID;
    setSecurityIDIsSet(true);
    return this;
  }

  public void unsetSecurityID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SECURITYID_ISSET_ID);
  }

  /** Returns true if field securityID is set (has been assigned a value) and false otherwise */
  public boolean isSetSecurityID() {
    return EncodingUtils.testBit(__isset_bitfield, __SECURITYID_ISSET_ID);
  }

  public void setSecurityIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SECURITYID_ISSET_ID, value);
  }

  public double getApplVersionID() {
    return this.applVersionID;
  }

  public MarketData setApplVersionID(double applVersionID) {
    this.applVersionID = applVersionID;
    setApplVersionIDIsSet(true);
    return this;
  }

  public void unsetApplVersionID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPLVERSIONID_ISSET_ID);
  }

  /** Returns true if field applVersionID is set (has been assigned a value) and false otherwise */
  public boolean isSetApplVersionID() {
    return EncodingUtils.testBit(__isset_bitfield, __APPLVERSIONID_ISSET_ID);
  }

  public void setApplVersionIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPLVERSIONID_ISSET_ID, value);
  }

  public double getMessageType() {
    return this.messageType;
  }

  public MarketData setMessageType(double messageType) {
    this.messageType = messageType;
    setMessageTypeIsSet(true);
    return this;
  }

  public void unsetMessageType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MESSAGETYPE_ISSET_ID);
  }

  /** Returns true if field messageType is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageType() {
    return EncodingUtils.testBit(__isset_bitfield, __MESSAGETYPE_ISSET_ID);
  }

  public void setMessageTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MESSAGETYPE_ISSET_ID, value);
  }

  public double getSenderCompID() {
    return this.senderCompID;
  }

  public MarketData setSenderCompID(double senderCompID) {
    this.senderCompID = senderCompID;
    setSenderCompIDIsSet(true);
    return this;
  }

  public void unsetSenderCompID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SENDERCOMPID_ISSET_ID);
  }

  /** Returns true if field senderCompID is set (has been assigned a value) and false otherwise */
  public boolean isSetSenderCompID() {
    return EncodingUtils.testBit(__isset_bitfield, __SENDERCOMPID_ISSET_ID);
  }

  public void setSenderCompIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SENDERCOMPID_ISSET_ID, value);
  }

  public int getMsgSeqNum() {
    return this.msgSeqNum;
  }

  public MarketData setMsgSeqNum(int msgSeqNum) {
    this.msgSeqNum = msgSeqNum;
    setMsgSeqNumIsSet(true);
    return this;
  }

  public void unsetMsgSeqNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MSGSEQNUM_ISSET_ID);
  }

  /** Returns true if field msgSeqNum is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgSeqNum() {
    return EncodingUtils.testBit(__isset_bitfield, __MSGSEQNUM_ISSET_ID);
  }

  public void setMsgSeqNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MSGSEQNUM_ISSET_ID, value);
  }

  public int getSendingTime() {
    return this.sendingTime;
  }

  public MarketData setSendingTime(int sendingTime) {
    this.sendingTime = sendingTime;
    setSendingTimeIsSet(true);
    return this;
  }

  public void unsetSendingTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SENDINGTIME_ISSET_ID);
  }

  /** Returns true if field sendingTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSendingTime() {
    return EncodingUtils.testBit(__isset_bitfield, __SENDINGTIME_ISSET_ID);
  }

  public void setSendingTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SENDINGTIME_ISSET_ID, value);
  }

  public int getTradeDate() {
    return this.tradeDate;
  }

  public MarketData setTradeDate(int tradeDate) {
    this.tradeDate = tradeDate;
    setTradeDateIsSet(true);
    return this;
  }

  public void unsetTradeDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADEDATE_ISSET_ID);
  }

  /** Returns true if field tradeDate is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeDate() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADEDATE_ISSET_ID);
  }

  public void setTradeDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADEDATE_ISSET_ID, value);
  }

  public int getMdEntriesSize() {
    return (this.mdEntries == null) ? 0 : this.mdEntries.size();
  }

  public java.util.Iterator<MarketDataEntry> getMdEntriesIterator() {
    return (this.mdEntries == null) ? null : this.mdEntries.iterator();
  }

  public void addToMdEntries(MarketDataEntry elem) {
    if (this.mdEntries == null) {
      this.mdEntries = new ArrayList<MarketDataEntry>();
    }
    this.mdEntries.add(elem);
  }

  public List<MarketDataEntry> getMdEntries() {
    return this.mdEntries;
  }

  public MarketData setMdEntries(List<MarketDataEntry> mdEntries) {
    this.mdEntries = mdEntries;
    return this;
  }

  public void unsetMdEntries() {
    this.mdEntries = null;
  }

  /** Returns true if field mdEntries is set (has been assigned a value) and false otherwise */
  public boolean isSetMdEntries() {
    return this.mdEntries != null;
  }

  public void setMdEntriesIsSet(boolean value) {
    if (!value) {
      this.mdEntries = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IS_ECHO:
      if (value == null) {
        unsetIsEcho();
      } else {
        setIsEcho((Boolean)value);
      }
      break;

    case COUNTER:
      if (value == null) {
        unsetCounter();
      } else {
        setCounter((Integer)value);
      }
      break;

    case SECURITY_ID:
      if (value == null) {
        unsetSecurityID();
      } else {
        setSecurityID((Integer)value);
      }
      break;

    case APPL_VERSION_ID:
      if (value == null) {
        unsetApplVersionID();
      } else {
        setApplVersionID((Double)value);
      }
      break;

    case MESSAGE_TYPE:
      if (value == null) {
        unsetMessageType();
      } else {
        setMessageType((Double)value);
      }
      break;

    case SENDER_COMP_ID:
      if (value == null) {
        unsetSenderCompID();
      } else {
        setSenderCompID((Double)value);
      }
      break;

    case MSG_SEQ_NUM:
      if (value == null) {
        unsetMsgSeqNum();
      } else {
        setMsgSeqNum((Integer)value);
      }
      break;

    case SENDING_TIME:
      if (value == null) {
        unsetSendingTime();
      } else {
        setSendingTime((Integer)value);
      }
      break;

    case TRADE_DATE:
      if (value == null) {
        unsetTradeDate();
      } else {
        setTradeDate((Integer)value);
      }
      break;

    case MD_ENTRIES:
      if (value == null) {
        unsetMdEntries();
      } else {
        setMdEntries((List<MarketDataEntry>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IS_ECHO:
      return Boolean.valueOf(isIsEcho());

    case COUNTER:
      return Integer.valueOf(getCounter());

    case SECURITY_ID:
      return Integer.valueOf(getSecurityID());

    case APPL_VERSION_ID:
      return Double.valueOf(getApplVersionID());

    case MESSAGE_TYPE:
      return Double.valueOf(getMessageType());

    case SENDER_COMP_ID:
      return Double.valueOf(getSenderCompID());

    case MSG_SEQ_NUM:
      return Integer.valueOf(getMsgSeqNum());

    case SENDING_TIME:
      return Integer.valueOf(getSendingTime());

    case TRADE_DATE:
      return Integer.valueOf(getTradeDate());

    case MD_ENTRIES:
      return getMdEntries();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IS_ECHO:
      return isSetIsEcho();
    case COUNTER:
      return isSetCounter();
    case SECURITY_ID:
      return isSetSecurityID();
    case APPL_VERSION_ID:
      return isSetApplVersionID();
    case MESSAGE_TYPE:
      return isSetMessageType();
    case SENDER_COMP_ID:
      return isSetSenderCompID();
    case MSG_SEQ_NUM:
      return isSetMsgSeqNum();
    case SENDING_TIME:
      return isSetSendingTime();
    case TRADE_DATE:
      return isSetTradeDate();
    case MD_ENTRIES:
      return isSetMdEntries();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MarketData)
      return this.equals((MarketData)that);
    return false;
  }

  public boolean equals(MarketData that) {
    if (that == null)
      return false;

    boolean this_present_isEcho = true;
    boolean that_present_isEcho = true;
    if (this_present_isEcho || that_present_isEcho) {
      if (!(this_present_isEcho && that_present_isEcho))
        return false;
      if (this.isEcho != that.isEcho)
        return false;
    }

    boolean this_present_counter = true;
    boolean that_present_counter = true;
    if (this_present_counter || that_present_counter) {
      if (!(this_present_counter && that_present_counter))
        return false;
      if (this.counter != that.counter)
        return false;
    }

    boolean this_present_securityID = true;
    boolean that_present_securityID = true;
    if (this_present_securityID || that_present_securityID) {
      if (!(this_present_securityID && that_present_securityID))
        return false;
      if (this.securityID != that.securityID)
        return false;
    }

    boolean this_present_applVersionID = true;
    boolean that_present_applVersionID = true;
    if (this_present_applVersionID || that_present_applVersionID) {
      if (!(this_present_applVersionID && that_present_applVersionID))
        return false;
      if (this.applVersionID != that.applVersionID)
        return false;
    }

    boolean this_present_messageType = true;
    boolean that_present_messageType = true;
    if (this_present_messageType || that_present_messageType) {
      if (!(this_present_messageType && that_present_messageType))
        return false;
      if (this.messageType != that.messageType)
        return false;
    }

    boolean this_present_senderCompID = true;
    boolean that_present_senderCompID = true;
    if (this_present_senderCompID || that_present_senderCompID) {
      if (!(this_present_senderCompID && that_present_senderCompID))
        return false;
      if (this.senderCompID != that.senderCompID)
        return false;
    }

    boolean this_present_msgSeqNum = true;
    boolean that_present_msgSeqNum = true;
    if (this_present_msgSeqNum || that_present_msgSeqNum) {
      if (!(this_present_msgSeqNum && that_present_msgSeqNum))
        return false;
      if (this.msgSeqNum != that.msgSeqNum)
        return false;
    }

    boolean this_present_sendingTime = true;
    boolean that_present_sendingTime = true;
    if (this_present_sendingTime || that_present_sendingTime) {
      if (!(this_present_sendingTime && that_present_sendingTime))
        return false;
      if (this.sendingTime != that.sendingTime)
        return false;
    }

    boolean this_present_tradeDate = true;
    boolean that_present_tradeDate = true;
    if (this_present_tradeDate || that_present_tradeDate) {
      if (!(this_present_tradeDate && that_present_tradeDate))
        return false;
      if (this.tradeDate != that.tradeDate)
        return false;
    }

    boolean this_present_mdEntries = true && this.isSetMdEntries();
    boolean that_present_mdEntries = true && that.isSetMdEntries();
    if (this_present_mdEntries || that_present_mdEntries) {
      if (!(this_present_mdEntries && that_present_mdEntries))
        return false;
      if (!this.mdEntries.equals(that.mdEntries))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(MarketData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIsEcho()).compareTo(other.isSetIsEcho());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsEcho()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isEcho, other.isEcho);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCounter()).compareTo(other.isSetCounter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCounter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.counter, other.counter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecurityID()).compareTo(other.isSetSecurityID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecurityID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.securityID, other.securityID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplVersionID()).compareTo(other.isSetApplVersionID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplVersionID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applVersionID, other.applVersionID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessageType()).compareTo(other.isSetMessageType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageType, other.messageType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSenderCompID()).compareTo(other.isSetSenderCompID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSenderCompID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.senderCompID, other.senderCompID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsgSeqNum()).compareTo(other.isSetMsgSeqNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgSeqNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgSeqNum, other.msgSeqNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSendingTime()).compareTo(other.isSetSendingTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendingTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendingTime, other.sendingTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeDate()).compareTo(other.isSetTradeDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeDate, other.tradeDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMdEntries()).compareTo(other.isSetMdEntries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMdEntries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mdEntries, other.mdEntries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MarketData(");
    boolean first = true;

    sb.append("isEcho:");
    sb.append(this.isEcho);
    first = false;
    if (!first) sb.append(", ");
    sb.append("counter:");
    sb.append(this.counter);
    first = false;
    if (!first) sb.append(", ");
    sb.append("securityID:");
    sb.append(this.securityID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("applVersionID:");
    sb.append(this.applVersionID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("messageType:");
    sb.append(this.messageType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("senderCompID:");
    sb.append(this.senderCompID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("msgSeqNum:");
    sb.append(this.msgSeqNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sendingTime:");
    sb.append(this.sendingTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeDate:");
    sb.append(this.tradeDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mdEntries:");
    if (this.mdEntries == null) {
      sb.append("null");
    } else {
      sb.append(this.mdEntries);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MarketDataStandardSchemeFactory implements SchemeFactory {
    public MarketDataStandardScheme getScheme() {
      return new MarketDataStandardScheme();
    }
  }

  private static class MarketDataStandardScheme extends StandardScheme<MarketData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MarketData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IS_ECHO
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isEcho = iprot.readBool();
              struct.setIsEchoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COUNTER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.counter = iprot.readI32();
              struct.setCounterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SECURITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.securityID = iprot.readI32();
              struct.setSecurityIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // APPL_VERSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.applVersionID = iprot.readDouble();
              struct.setApplVersionIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MESSAGE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.messageType = iprot.readDouble();
              struct.setMessageTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SENDER_COMP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.senderCompID = iprot.readDouble();
              struct.setSenderCompIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MSG_SEQ_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.msgSeqNum = iprot.readI32();
              struct.setMsgSeqNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SENDING_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sendingTime = iprot.readI32();
              struct.setSendingTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TRADE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tradeDate = iprot.readI32();
              struct.setTradeDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MD_ENTRIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.mdEntries = new ArrayList<MarketDataEntry>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  MarketDataEntry _elem2;
                  _elem2 = new MarketDataEntry();
                  _elem2.read(iprot);
                  struct.mdEntries.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setMdEntriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MarketData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(IS_ECHO_FIELD_DESC);
      oprot.writeBool(struct.isEcho);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COUNTER_FIELD_DESC);
      oprot.writeI32(struct.counter);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SECURITY_ID_FIELD_DESC);
      oprot.writeI32(struct.securityID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APPL_VERSION_ID_FIELD_DESC);
      oprot.writeDouble(struct.applVersionID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MESSAGE_TYPE_FIELD_DESC);
      oprot.writeDouble(struct.messageType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SENDER_COMP_ID_FIELD_DESC);
      oprot.writeDouble(struct.senderCompID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MSG_SEQ_NUM_FIELD_DESC);
      oprot.writeI32(struct.msgSeqNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SENDING_TIME_FIELD_DESC);
      oprot.writeI32(struct.sendingTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRADE_DATE_FIELD_DESC);
      oprot.writeI32(struct.tradeDate);
      oprot.writeFieldEnd();
      if (struct.mdEntries != null) {
        oprot.writeFieldBegin(MD_ENTRIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.mdEntries.size()));
          for (MarketDataEntry _iter3 : struct.mdEntries)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MarketDataTupleSchemeFactory implements SchemeFactory {
    public MarketDataTupleScheme getScheme() {
      return new MarketDataTupleScheme();
    }
  }

  private static class MarketDataTupleScheme extends TupleScheme<MarketData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MarketData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIsEcho()) {
        optionals.set(0);
      }
      if (struct.isSetCounter()) {
        optionals.set(1);
      }
      if (struct.isSetSecurityID()) {
        optionals.set(2);
      }
      if (struct.isSetApplVersionID()) {
        optionals.set(3);
      }
      if (struct.isSetMessageType()) {
        optionals.set(4);
      }
      if (struct.isSetSenderCompID()) {
        optionals.set(5);
      }
      if (struct.isSetMsgSeqNum()) {
        optionals.set(6);
      }
      if (struct.isSetSendingTime()) {
        optionals.set(7);
      }
      if (struct.isSetTradeDate()) {
        optionals.set(8);
      }
      if (struct.isSetMdEntries()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetIsEcho()) {
        oprot.writeBool(struct.isEcho);
      }
      if (struct.isSetCounter()) {
        oprot.writeI32(struct.counter);
      }
      if (struct.isSetSecurityID()) {
        oprot.writeI32(struct.securityID);
      }
      if (struct.isSetApplVersionID()) {
        oprot.writeDouble(struct.applVersionID);
      }
      if (struct.isSetMessageType()) {
        oprot.writeDouble(struct.messageType);
      }
      if (struct.isSetSenderCompID()) {
        oprot.writeDouble(struct.senderCompID);
      }
      if (struct.isSetMsgSeqNum()) {
        oprot.writeI32(struct.msgSeqNum);
      }
      if (struct.isSetSendingTime()) {
        oprot.writeI32(struct.sendingTime);
      }
      if (struct.isSetTradeDate()) {
        oprot.writeI32(struct.tradeDate);
      }
      if (struct.isSetMdEntries()) {
        {
          oprot.writeI32(struct.mdEntries.size());
          for (MarketDataEntry _iter4 : struct.mdEntries)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MarketData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.isEcho = iprot.readBool();
        struct.setIsEchoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.counter = iprot.readI32();
        struct.setCounterIsSet(true);
      }
      if (incoming.get(2)) {
        struct.securityID = iprot.readI32();
        struct.setSecurityIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.applVersionID = iprot.readDouble();
        struct.setApplVersionIDIsSet(true);
      }
      if (incoming.get(4)) {
        struct.messageType = iprot.readDouble();
        struct.setMessageTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.senderCompID = iprot.readDouble();
        struct.setSenderCompIDIsSet(true);
      }
      if (incoming.get(6)) {
        struct.msgSeqNum = iprot.readI32();
        struct.setMsgSeqNumIsSet(true);
      }
      if (incoming.get(7)) {
        struct.sendingTime = iprot.readI32();
        struct.setSendingTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.tradeDate = iprot.readI32();
        struct.setTradeDateIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.mdEntries = new ArrayList<MarketDataEntry>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            MarketDataEntry _elem7;
            _elem7 = new MarketDataEntry();
            _elem7.read(iprot);
            struct.mdEntries.add(_elem7);
          }
        }
        struct.setMdEntriesIsSet(true);
      }
    }
  }

}

