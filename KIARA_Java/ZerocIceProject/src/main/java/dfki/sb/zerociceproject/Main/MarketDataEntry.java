// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `benchmark.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package dfki.sb.zerociceproject.Main;

public class MarketDataEntry implements java.lang.Cloneable, java.io.Serializable
{
    public int mdUpdateAction;

    public int mdPriceLevel;

    public double mdEntryType;

    public int openCloseSettleFlag;

    public int securityIDSource;

    public int securityID;

    public int rptSeq;

    public double mdEntryPx;

    public int mdEntryTime;

    public int mdEntrySize;

    public int numberOfOrders;

    public double tradingSessionID;

    public double netChgPrevDay;

    public int tradeVolume;

    public double tradeCondition;

    public double tickDirection;

    public double quoteCondition;

    public int aggressorSide;

    public double matchEventIndicator;

    public double dummy1;

    public int dummy2;

    public MarketDataEntry()
    {
    }

    public MarketDataEntry(int mdUpdateAction, int mdPriceLevel, double mdEntryType, int openCloseSettleFlag, int securityIDSource, int securityID, int rptSeq, double mdEntryPx, int mdEntryTime, int mdEntrySize, int numberOfOrders, double tradingSessionID, double netChgPrevDay, int tradeVolume, double tradeCondition, double tickDirection, double quoteCondition, int aggressorSide, double matchEventIndicator, double dummy1, int dummy2)
    {
        this.mdUpdateAction = mdUpdateAction;
        this.mdPriceLevel = mdPriceLevel;
        this.mdEntryType = mdEntryType;
        this.openCloseSettleFlag = openCloseSettleFlag;
        this.securityIDSource = securityIDSource;
        this.securityID = securityID;
        this.rptSeq = rptSeq;
        this.mdEntryPx = mdEntryPx;
        this.mdEntryTime = mdEntryTime;
        this.mdEntrySize = mdEntrySize;
        this.numberOfOrders = numberOfOrders;
        this.tradingSessionID = tradingSessionID;
        this.netChgPrevDay = netChgPrevDay;
        this.tradeVolume = tradeVolume;
        this.tradeCondition = tradeCondition;
        this.tickDirection = tickDirection;
        this.quoteCondition = quoteCondition;
        this.aggressorSide = aggressorSide;
        this.matchEventIndicator = matchEventIndicator;
        this.dummy1 = dummy1;
        this.dummy2 = dummy2;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        MarketDataEntry _r = null;
        if(rhs instanceof MarketDataEntry)
        {
            _r = (MarketDataEntry)rhs;
        }

        if(_r != null)
        {
            if(mdUpdateAction != _r.mdUpdateAction)
            {
                return false;
            }
            if(mdPriceLevel != _r.mdPriceLevel)
            {
                return false;
            }
            if(mdEntryType != _r.mdEntryType)
            {
                return false;
            }
            if(openCloseSettleFlag != _r.openCloseSettleFlag)
            {
                return false;
            }
            if(securityIDSource != _r.securityIDSource)
            {
                return false;
            }
            if(securityID != _r.securityID)
            {
                return false;
            }
            if(rptSeq != _r.rptSeq)
            {
                return false;
            }
            if(mdEntryPx != _r.mdEntryPx)
            {
                return false;
            }
            if(mdEntryTime != _r.mdEntryTime)
            {
                return false;
            }
            if(mdEntrySize != _r.mdEntrySize)
            {
                return false;
            }
            if(numberOfOrders != _r.numberOfOrders)
            {
                return false;
            }
            if(tradingSessionID != _r.tradingSessionID)
            {
                return false;
            }
            if(netChgPrevDay != _r.netChgPrevDay)
            {
                return false;
            }
            if(tradeVolume != _r.tradeVolume)
            {
                return false;
            }
            if(tradeCondition != _r.tradeCondition)
            {
                return false;
            }
            if(tickDirection != _r.tickDirection)
            {
                return false;
            }
            if(quoteCondition != _r.quoteCondition)
            {
                return false;
            }
            if(aggressorSide != _r.aggressorSide)
            {
                return false;
            }
            if(matchEventIndicator != _r.matchEventIndicator)
            {
                return false;
            }
            if(dummy1 != _r.dummy1)
            {
                return false;
            }
            if(dummy2 != _r.dummy2)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::Main::MarketDataEntry");
        __h = IceInternal.HashUtil.hashAdd(__h, mdUpdateAction);
        __h = IceInternal.HashUtil.hashAdd(__h, mdPriceLevel);
        __h = IceInternal.HashUtil.hashAdd(__h, mdEntryType);
        __h = IceInternal.HashUtil.hashAdd(__h, openCloseSettleFlag);
        __h = IceInternal.HashUtil.hashAdd(__h, securityIDSource);
        __h = IceInternal.HashUtil.hashAdd(__h, securityID);
        __h = IceInternal.HashUtil.hashAdd(__h, rptSeq);
        __h = IceInternal.HashUtil.hashAdd(__h, mdEntryPx);
        __h = IceInternal.HashUtil.hashAdd(__h, mdEntryTime);
        __h = IceInternal.HashUtil.hashAdd(__h, mdEntrySize);
        __h = IceInternal.HashUtil.hashAdd(__h, numberOfOrders);
        __h = IceInternal.HashUtil.hashAdd(__h, tradingSessionID);
        __h = IceInternal.HashUtil.hashAdd(__h, netChgPrevDay);
        __h = IceInternal.HashUtil.hashAdd(__h, tradeVolume);
        __h = IceInternal.HashUtil.hashAdd(__h, tradeCondition);
        __h = IceInternal.HashUtil.hashAdd(__h, tickDirection);
        __h = IceInternal.HashUtil.hashAdd(__h, quoteCondition);
        __h = IceInternal.HashUtil.hashAdd(__h, aggressorSide);
        __h = IceInternal.HashUtil.hashAdd(__h, matchEventIndicator);
        __h = IceInternal.HashUtil.hashAdd(__h, dummy1);
        __h = IceInternal.HashUtil.hashAdd(__h, dummy2);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeInt(mdUpdateAction);
        __os.writeInt(mdPriceLevel);
        __os.writeDouble(mdEntryType);
        __os.writeInt(openCloseSettleFlag);
        __os.writeInt(securityIDSource);
        __os.writeInt(securityID);
        __os.writeInt(rptSeq);
        __os.writeDouble(mdEntryPx);
        __os.writeInt(mdEntryTime);
        __os.writeInt(mdEntrySize);
        __os.writeInt(numberOfOrders);
        __os.writeDouble(tradingSessionID);
        __os.writeDouble(netChgPrevDay);
        __os.writeInt(tradeVolume);
        __os.writeDouble(tradeCondition);
        __os.writeDouble(tickDirection);
        __os.writeDouble(quoteCondition);
        __os.writeInt(aggressorSide);
        __os.writeDouble(matchEventIndicator);
        __os.writeDouble(dummy1);
        __os.writeInt(dummy2);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        mdUpdateAction = __is.readInt();
        mdPriceLevel = __is.readInt();
        mdEntryType = __is.readDouble();
        openCloseSettleFlag = __is.readInt();
        securityIDSource = __is.readInt();
        securityID = __is.readInt();
        rptSeq = __is.readInt();
        mdEntryPx = __is.readDouble();
        mdEntryTime = __is.readInt();
        mdEntrySize = __is.readInt();
        numberOfOrders = __is.readInt();
        tradingSessionID = __is.readDouble();
        netChgPrevDay = __is.readDouble();
        tradeVolume = __is.readInt();
        tradeCondition = __is.readDouble();
        tickDirection = __is.readDouble();
        quoteCondition = __is.readDouble();
        aggressorSide = __is.readInt();
        matchEventIndicator = __is.readDouble();
        dummy1 = __is.readDouble();
        dummy2 = __is.readInt();
    }

    public static final long serialVersionUID = -853401128L;
}
