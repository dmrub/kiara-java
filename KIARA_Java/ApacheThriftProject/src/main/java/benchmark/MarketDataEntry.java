/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package benchmark;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MarketDataEntry implements org.apache.thrift.TBase<MarketDataEntry, MarketDataEntry._Fields>, java.io.Serializable, Cloneable, Comparable<MarketDataEntry> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MarketDataEntry");

  private static final org.apache.thrift.protocol.TField MD_UPDATE_ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("mdUpdateAction", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MD_PRICE_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("mdPriceLevel", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MD_ENTRY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("mdEntryType", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField OPEN_CLOSE_SETTLE_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("openCloseSettleFlag", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SECURITY_IDSOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("securityIDSource", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SECURITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("securityID", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField RPT_SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("rptSeq", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField MD_ENTRY_PX_FIELD_DESC = new org.apache.thrift.protocol.TField("mdEntryPx", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField MD_ENTRY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("mdEntryTime", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField MD_ENTRY_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("mdEntrySize", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField NUMBER_OF_ORDERS_FIELD_DESC = new org.apache.thrift.protocol.TField("numberOfOrders", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField TRADING_SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tradingSessionID", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField NET_CHG_PREV_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("netChgPrevDay", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField TRADE_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeVolume", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField TRADE_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeCondition", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField TICK_DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tickDirection", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField QUOTE_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("quoteCondition", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField AGGRESSOR_SIDE_FIELD_DESC = new org.apache.thrift.protocol.TField("aggressorSide", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField MATCH_EVENT_INDICATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("matchEventIndicator", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField DUMMY1_FIELD_DESC = new org.apache.thrift.protocol.TField("dummy1", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField DUMMY2_FIELD_DESC = new org.apache.thrift.protocol.TField("dummy2", org.apache.thrift.protocol.TType.I32, (short)21);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MarketDataEntryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MarketDataEntryTupleSchemeFactory());
  }

  public int mdUpdateAction; // required
  public int mdPriceLevel; // required
  public double mdEntryType; // required
  public int openCloseSettleFlag; // required
  public int securityIDSource; // required
  public int securityID; // required
  public int rptSeq; // required
  public double mdEntryPx; // required
  public int mdEntryTime; // required
  public int mdEntrySize; // required
  public int numberOfOrders; // required
  public double tradingSessionID; // required
  public double netChgPrevDay; // required
  public int tradeVolume; // required
  public double tradeCondition; // required
  public double tickDirection; // required
  public double quoteCondition; // required
  public int aggressorSide; // required
  public double matchEventIndicator; // required
  public double dummy1; // required
  public int dummy2; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MD_UPDATE_ACTION((short)1, "mdUpdateAction"),
    MD_PRICE_LEVEL((short)2, "mdPriceLevel"),
    MD_ENTRY_TYPE((short)3, "mdEntryType"),
    OPEN_CLOSE_SETTLE_FLAG((short)4, "openCloseSettleFlag"),
    SECURITY_IDSOURCE((short)5, "securityIDSource"),
    SECURITY_ID((short)6, "securityID"),
    RPT_SEQ((short)7, "rptSeq"),
    MD_ENTRY_PX((short)8, "mdEntryPx"),
    MD_ENTRY_TIME((short)9, "mdEntryTime"),
    MD_ENTRY_SIZE((short)10, "mdEntrySize"),
    NUMBER_OF_ORDERS((short)11, "numberOfOrders"),
    TRADING_SESSION_ID((short)12, "tradingSessionID"),
    NET_CHG_PREV_DAY((short)13, "netChgPrevDay"),
    TRADE_VOLUME((short)14, "tradeVolume"),
    TRADE_CONDITION((short)15, "tradeCondition"),
    TICK_DIRECTION((short)16, "tickDirection"),
    QUOTE_CONDITION((short)17, "quoteCondition"),
    AGGRESSOR_SIDE((short)18, "aggressorSide"),
    MATCH_EVENT_INDICATOR((short)19, "matchEventIndicator"),
    DUMMY1((short)20, "dummy1"),
    DUMMY2((short)21, "dummy2");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MD_UPDATE_ACTION
          return MD_UPDATE_ACTION;
        case 2: // MD_PRICE_LEVEL
          return MD_PRICE_LEVEL;
        case 3: // MD_ENTRY_TYPE
          return MD_ENTRY_TYPE;
        case 4: // OPEN_CLOSE_SETTLE_FLAG
          return OPEN_CLOSE_SETTLE_FLAG;
        case 5: // SECURITY_IDSOURCE
          return SECURITY_IDSOURCE;
        case 6: // SECURITY_ID
          return SECURITY_ID;
        case 7: // RPT_SEQ
          return RPT_SEQ;
        case 8: // MD_ENTRY_PX
          return MD_ENTRY_PX;
        case 9: // MD_ENTRY_TIME
          return MD_ENTRY_TIME;
        case 10: // MD_ENTRY_SIZE
          return MD_ENTRY_SIZE;
        case 11: // NUMBER_OF_ORDERS
          return NUMBER_OF_ORDERS;
        case 12: // TRADING_SESSION_ID
          return TRADING_SESSION_ID;
        case 13: // NET_CHG_PREV_DAY
          return NET_CHG_PREV_DAY;
        case 14: // TRADE_VOLUME
          return TRADE_VOLUME;
        case 15: // TRADE_CONDITION
          return TRADE_CONDITION;
        case 16: // TICK_DIRECTION
          return TICK_DIRECTION;
        case 17: // QUOTE_CONDITION
          return QUOTE_CONDITION;
        case 18: // AGGRESSOR_SIDE
          return AGGRESSOR_SIDE;
        case 19: // MATCH_EVENT_INDICATOR
          return MATCH_EVENT_INDICATOR;
        case 20: // DUMMY1
          return DUMMY1;
        case 21: // DUMMY2
          return DUMMY2;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MDUPDATEACTION_ISSET_ID = 0;
  private static final int __MDPRICELEVEL_ISSET_ID = 1;
  private static final int __MDENTRYTYPE_ISSET_ID = 2;
  private static final int __OPENCLOSESETTLEFLAG_ISSET_ID = 3;
  private static final int __SECURITYIDSOURCE_ISSET_ID = 4;
  private static final int __SECURITYID_ISSET_ID = 5;
  private static final int __RPTSEQ_ISSET_ID = 6;
  private static final int __MDENTRYPX_ISSET_ID = 7;
  private static final int __MDENTRYTIME_ISSET_ID = 8;
  private static final int __MDENTRYSIZE_ISSET_ID = 9;
  private static final int __NUMBEROFORDERS_ISSET_ID = 10;
  private static final int __TRADINGSESSIONID_ISSET_ID = 11;
  private static final int __NETCHGPREVDAY_ISSET_ID = 12;
  private static final int __TRADEVOLUME_ISSET_ID = 13;
  private static final int __TRADECONDITION_ISSET_ID = 14;
  private static final int __TICKDIRECTION_ISSET_ID = 15;
  private static final int __QUOTECONDITION_ISSET_ID = 16;
  private static final int __AGGRESSORSIDE_ISSET_ID = 17;
  private static final int __MATCHEVENTINDICATOR_ISSET_ID = 18;
  private static final int __DUMMY1_ISSET_ID = 19;
  private static final int __DUMMY2_ISSET_ID = 20;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MD_UPDATE_ACTION, new org.apache.thrift.meta_data.FieldMetaData("mdUpdateAction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MD_PRICE_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("mdPriceLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MD_ENTRY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("mdEntryType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OPEN_CLOSE_SETTLE_FLAG, new org.apache.thrift.meta_data.FieldMetaData("openCloseSettleFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SECURITY_IDSOURCE, new org.apache.thrift.meta_data.FieldMetaData("securityIDSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SECURITY_ID, new org.apache.thrift.meta_data.FieldMetaData("securityID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RPT_SEQ, new org.apache.thrift.meta_data.FieldMetaData("rptSeq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MD_ENTRY_PX, new org.apache.thrift.meta_data.FieldMetaData("mdEntryPx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MD_ENTRY_TIME, new org.apache.thrift.meta_data.FieldMetaData("mdEntryTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MD_ENTRY_SIZE, new org.apache.thrift.meta_data.FieldMetaData("mdEntrySize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUMBER_OF_ORDERS, new org.apache.thrift.meta_data.FieldMetaData("numberOfOrders", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRADING_SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("tradingSessionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NET_CHG_PREV_DAY, new org.apache.thrift.meta_data.FieldMetaData("netChgPrevDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TRADE_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("tradeVolume", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRADE_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("tradeCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TICK_DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("tickDirection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.QUOTE_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("quoteCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AGGRESSOR_SIDE, new org.apache.thrift.meta_data.FieldMetaData("aggressorSide", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MATCH_EVENT_INDICATOR, new org.apache.thrift.meta_data.FieldMetaData("matchEventIndicator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DUMMY1, new org.apache.thrift.meta_data.FieldMetaData("dummy1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DUMMY2, new org.apache.thrift.meta_data.FieldMetaData("dummy2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MarketDataEntry.class, metaDataMap);
  }

  public MarketDataEntry() {
  }

  public MarketDataEntry(
    int mdUpdateAction,
    int mdPriceLevel,
    double mdEntryType,
    int openCloseSettleFlag,
    int securityIDSource,
    int securityID,
    int rptSeq,
    double mdEntryPx,
    int mdEntryTime,
    int mdEntrySize,
    int numberOfOrders,
    double tradingSessionID,
    double netChgPrevDay,
    int tradeVolume,
    double tradeCondition,
    double tickDirection,
    double quoteCondition,
    int aggressorSide,
    double matchEventIndicator,
    double dummy1,
    int dummy2)
  {
    this();
    this.mdUpdateAction = mdUpdateAction;
    setMdUpdateActionIsSet(true);
    this.mdPriceLevel = mdPriceLevel;
    setMdPriceLevelIsSet(true);
    this.mdEntryType = mdEntryType;
    setMdEntryTypeIsSet(true);
    this.openCloseSettleFlag = openCloseSettleFlag;
    setOpenCloseSettleFlagIsSet(true);
    this.securityIDSource = securityIDSource;
    setSecurityIDSourceIsSet(true);
    this.securityID = securityID;
    setSecurityIDIsSet(true);
    this.rptSeq = rptSeq;
    setRptSeqIsSet(true);
    this.mdEntryPx = mdEntryPx;
    setMdEntryPxIsSet(true);
    this.mdEntryTime = mdEntryTime;
    setMdEntryTimeIsSet(true);
    this.mdEntrySize = mdEntrySize;
    setMdEntrySizeIsSet(true);
    this.numberOfOrders = numberOfOrders;
    setNumberOfOrdersIsSet(true);
    this.tradingSessionID = tradingSessionID;
    setTradingSessionIDIsSet(true);
    this.netChgPrevDay = netChgPrevDay;
    setNetChgPrevDayIsSet(true);
    this.tradeVolume = tradeVolume;
    setTradeVolumeIsSet(true);
    this.tradeCondition = tradeCondition;
    setTradeConditionIsSet(true);
    this.tickDirection = tickDirection;
    setTickDirectionIsSet(true);
    this.quoteCondition = quoteCondition;
    setQuoteConditionIsSet(true);
    this.aggressorSide = aggressorSide;
    setAggressorSideIsSet(true);
    this.matchEventIndicator = matchEventIndicator;
    setMatchEventIndicatorIsSet(true);
    this.dummy1 = dummy1;
    setDummy1IsSet(true);
    this.dummy2 = dummy2;
    setDummy2IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MarketDataEntry(MarketDataEntry other) {
    __isset_bitfield = other.__isset_bitfield;
    this.mdUpdateAction = other.mdUpdateAction;
    this.mdPriceLevel = other.mdPriceLevel;
    this.mdEntryType = other.mdEntryType;
    this.openCloseSettleFlag = other.openCloseSettleFlag;
    this.securityIDSource = other.securityIDSource;
    this.securityID = other.securityID;
    this.rptSeq = other.rptSeq;
    this.mdEntryPx = other.mdEntryPx;
    this.mdEntryTime = other.mdEntryTime;
    this.mdEntrySize = other.mdEntrySize;
    this.numberOfOrders = other.numberOfOrders;
    this.tradingSessionID = other.tradingSessionID;
    this.netChgPrevDay = other.netChgPrevDay;
    this.tradeVolume = other.tradeVolume;
    this.tradeCondition = other.tradeCondition;
    this.tickDirection = other.tickDirection;
    this.quoteCondition = other.quoteCondition;
    this.aggressorSide = other.aggressorSide;
    this.matchEventIndicator = other.matchEventIndicator;
    this.dummy1 = other.dummy1;
    this.dummy2 = other.dummy2;
  }

  public MarketDataEntry deepCopy() {
    return new MarketDataEntry(this);
  }

  @Override
  public void clear() {
    setMdUpdateActionIsSet(false);
    this.mdUpdateAction = 0;
    setMdPriceLevelIsSet(false);
    this.mdPriceLevel = 0;
    setMdEntryTypeIsSet(false);
    this.mdEntryType = 0.0;
    setOpenCloseSettleFlagIsSet(false);
    this.openCloseSettleFlag = 0;
    setSecurityIDSourceIsSet(false);
    this.securityIDSource = 0;
    setSecurityIDIsSet(false);
    this.securityID = 0;
    setRptSeqIsSet(false);
    this.rptSeq = 0;
    setMdEntryPxIsSet(false);
    this.mdEntryPx = 0.0;
    setMdEntryTimeIsSet(false);
    this.mdEntryTime = 0;
    setMdEntrySizeIsSet(false);
    this.mdEntrySize = 0;
    setNumberOfOrdersIsSet(false);
    this.numberOfOrders = 0;
    setTradingSessionIDIsSet(false);
    this.tradingSessionID = 0.0;
    setNetChgPrevDayIsSet(false);
    this.netChgPrevDay = 0.0;
    setTradeVolumeIsSet(false);
    this.tradeVolume = 0;
    setTradeConditionIsSet(false);
    this.tradeCondition = 0.0;
    setTickDirectionIsSet(false);
    this.tickDirection = 0.0;
    setQuoteConditionIsSet(false);
    this.quoteCondition = 0.0;
    setAggressorSideIsSet(false);
    this.aggressorSide = 0;
    setMatchEventIndicatorIsSet(false);
    this.matchEventIndicator = 0.0;
    setDummy1IsSet(false);
    this.dummy1 = 0.0;
    setDummy2IsSet(false);
    this.dummy2 = 0;
  }

  public int getMdUpdateAction() {
    return this.mdUpdateAction;
  }

  public MarketDataEntry setMdUpdateAction(int mdUpdateAction) {
    this.mdUpdateAction = mdUpdateAction;
    setMdUpdateActionIsSet(true);
    return this;
  }

  public void unsetMdUpdateAction() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MDUPDATEACTION_ISSET_ID);
  }

  /** Returns true if field mdUpdateAction is set (has been assigned a value) and false otherwise */
  public boolean isSetMdUpdateAction() {
    return EncodingUtils.testBit(__isset_bitfield, __MDUPDATEACTION_ISSET_ID);
  }

  public void setMdUpdateActionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MDUPDATEACTION_ISSET_ID, value);
  }

  public int getMdPriceLevel() {
    return this.mdPriceLevel;
  }

  public MarketDataEntry setMdPriceLevel(int mdPriceLevel) {
    this.mdPriceLevel = mdPriceLevel;
    setMdPriceLevelIsSet(true);
    return this;
  }

  public void unsetMdPriceLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MDPRICELEVEL_ISSET_ID);
  }

  /** Returns true if field mdPriceLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetMdPriceLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __MDPRICELEVEL_ISSET_ID);
  }

  public void setMdPriceLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MDPRICELEVEL_ISSET_ID, value);
  }

  public double getMdEntryType() {
    return this.mdEntryType;
  }

  public MarketDataEntry setMdEntryType(double mdEntryType) {
    this.mdEntryType = mdEntryType;
    setMdEntryTypeIsSet(true);
    return this;
  }

  public void unsetMdEntryType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MDENTRYTYPE_ISSET_ID);
  }

  /** Returns true if field mdEntryType is set (has been assigned a value) and false otherwise */
  public boolean isSetMdEntryType() {
    return EncodingUtils.testBit(__isset_bitfield, __MDENTRYTYPE_ISSET_ID);
  }

  public void setMdEntryTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MDENTRYTYPE_ISSET_ID, value);
  }

  public int getOpenCloseSettleFlag() {
    return this.openCloseSettleFlag;
  }

  public MarketDataEntry setOpenCloseSettleFlag(int openCloseSettleFlag) {
    this.openCloseSettleFlag = openCloseSettleFlag;
    setOpenCloseSettleFlagIsSet(true);
    return this;
  }

  public void unsetOpenCloseSettleFlag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPENCLOSESETTLEFLAG_ISSET_ID);
  }

  /** Returns true if field openCloseSettleFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenCloseSettleFlag() {
    return EncodingUtils.testBit(__isset_bitfield, __OPENCLOSESETTLEFLAG_ISSET_ID);
  }

  public void setOpenCloseSettleFlagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPENCLOSESETTLEFLAG_ISSET_ID, value);
  }

  public int getSecurityIDSource() {
    return this.securityIDSource;
  }

  public MarketDataEntry setSecurityIDSource(int securityIDSource) {
    this.securityIDSource = securityIDSource;
    setSecurityIDSourceIsSet(true);
    return this;
  }

  public void unsetSecurityIDSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SECURITYIDSOURCE_ISSET_ID);
  }

  /** Returns true if field securityIDSource is set (has been assigned a value) and false otherwise */
  public boolean isSetSecurityIDSource() {
    return EncodingUtils.testBit(__isset_bitfield, __SECURITYIDSOURCE_ISSET_ID);
  }

  public void setSecurityIDSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SECURITYIDSOURCE_ISSET_ID, value);
  }

  public int getSecurityID() {
    return this.securityID;
  }

  public MarketDataEntry setSecurityID(int securityID) {
    this.securityID = securityID;
    setSecurityIDIsSet(true);
    return this;
  }

  public void unsetSecurityID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SECURITYID_ISSET_ID);
  }

  /** Returns true if field securityID is set (has been assigned a value) and false otherwise */
  public boolean isSetSecurityID() {
    return EncodingUtils.testBit(__isset_bitfield, __SECURITYID_ISSET_ID);
  }

  public void setSecurityIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SECURITYID_ISSET_ID, value);
  }

  public int getRptSeq() {
    return this.rptSeq;
  }

  public MarketDataEntry setRptSeq(int rptSeq) {
    this.rptSeq = rptSeq;
    setRptSeqIsSet(true);
    return this;
  }

  public void unsetRptSeq() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RPTSEQ_ISSET_ID);
  }

  /** Returns true if field rptSeq is set (has been assigned a value) and false otherwise */
  public boolean isSetRptSeq() {
    return EncodingUtils.testBit(__isset_bitfield, __RPTSEQ_ISSET_ID);
  }

  public void setRptSeqIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RPTSEQ_ISSET_ID, value);
  }

  public double getMdEntryPx() {
    return this.mdEntryPx;
  }

  public MarketDataEntry setMdEntryPx(double mdEntryPx) {
    this.mdEntryPx = mdEntryPx;
    setMdEntryPxIsSet(true);
    return this;
  }

  public void unsetMdEntryPx() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MDENTRYPX_ISSET_ID);
  }

  /** Returns true if field mdEntryPx is set (has been assigned a value) and false otherwise */
  public boolean isSetMdEntryPx() {
    return EncodingUtils.testBit(__isset_bitfield, __MDENTRYPX_ISSET_ID);
  }

  public void setMdEntryPxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MDENTRYPX_ISSET_ID, value);
  }

  public int getMdEntryTime() {
    return this.mdEntryTime;
  }

  public MarketDataEntry setMdEntryTime(int mdEntryTime) {
    this.mdEntryTime = mdEntryTime;
    setMdEntryTimeIsSet(true);
    return this;
  }

  public void unsetMdEntryTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MDENTRYTIME_ISSET_ID);
  }

  /** Returns true if field mdEntryTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMdEntryTime() {
    return EncodingUtils.testBit(__isset_bitfield, __MDENTRYTIME_ISSET_ID);
  }

  public void setMdEntryTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MDENTRYTIME_ISSET_ID, value);
  }

  public int getMdEntrySize() {
    return this.mdEntrySize;
  }

  public MarketDataEntry setMdEntrySize(int mdEntrySize) {
    this.mdEntrySize = mdEntrySize;
    setMdEntrySizeIsSet(true);
    return this;
  }

  public void unsetMdEntrySize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MDENTRYSIZE_ISSET_ID);
  }

  /** Returns true if field mdEntrySize is set (has been assigned a value) and false otherwise */
  public boolean isSetMdEntrySize() {
    return EncodingUtils.testBit(__isset_bitfield, __MDENTRYSIZE_ISSET_ID);
  }

  public void setMdEntrySizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MDENTRYSIZE_ISSET_ID, value);
  }

  public int getNumberOfOrders() {
    return this.numberOfOrders;
  }

  public MarketDataEntry setNumberOfOrders(int numberOfOrders) {
    this.numberOfOrders = numberOfOrders;
    setNumberOfOrdersIsSet(true);
    return this;
  }

  public void unsetNumberOfOrders() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBEROFORDERS_ISSET_ID);
  }

  /** Returns true if field numberOfOrders is set (has been assigned a value) and false otherwise */
  public boolean isSetNumberOfOrders() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMBEROFORDERS_ISSET_ID);
  }

  public void setNumberOfOrdersIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBEROFORDERS_ISSET_ID, value);
  }

  public double getTradingSessionID() {
    return this.tradingSessionID;
  }

  public MarketDataEntry setTradingSessionID(double tradingSessionID) {
    this.tradingSessionID = tradingSessionID;
    setTradingSessionIDIsSet(true);
    return this;
  }

  public void unsetTradingSessionID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADINGSESSIONID_ISSET_ID);
  }

  /** Returns true if field tradingSessionID is set (has been assigned a value) and false otherwise */
  public boolean isSetTradingSessionID() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADINGSESSIONID_ISSET_ID);
  }

  public void setTradingSessionIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADINGSESSIONID_ISSET_ID, value);
  }

  public double getNetChgPrevDay() {
    return this.netChgPrevDay;
  }

  public MarketDataEntry setNetChgPrevDay(double netChgPrevDay) {
    this.netChgPrevDay = netChgPrevDay;
    setNetChgPrevDayIsSet(true);
    return this;
  }

  public void unsetNetChgPrevDay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NETCHGPREVDAY_ISSET_ID);
  }

  /** Returns true if field netChgPrevDay is set (has been assigned a value) and false otherwise */
  public boolean isSetNetChgPrevDay() {
    return EncodingUtils.testBit(__isset_bitfield, __NETCHGPREVDAY_ISSET_ID);
  }

  public void setNetChgPrevDayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NETCHGPREVDAY_ISSET_ID, value);
  }

  public int getTradeVolume() {
    return this.tradeVolume;
  }

  public MarketDataEntry setTradeVolume(int tradeVolume) {
    this.tradeVolume = tradeVolume;
    setTradeVolumeIsSet(true);
    return this;
  }

  public void unsetTradeVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADEVOLUME_ISSET_ID);
  }

  /** Returns true if field tradeVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADEVOLUME_ISSET_ID);
  }

  public void setTradeVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADEVOLUME_ISSET_ID, value);
  }

  public double getTradeCondition() {
    return this.tradeCondition;
  }

  public MarketDataEntry setTradeCondition(double tradeCondition) {
    this.tradeCondition = tradeCondition;
    setTradeConditionIsSet(true);
    return this;
  }

  public void unsetTradeCondition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADECONDITION_ISSET_ID);
  }

  /** Returns true if field tradeCondition is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeCondition() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADECONDITION_ISSET_ID);
  }

  public void setTradeConditionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADECONDITION_ISSET_ID, value);
  }

  public double getTickDirection() {
    return this.tickDirection;
  }

  public MarketDataEntry setTickDirection(double tickDirection) {
    this.tickDirection = tickDirection;
    setTickDirectionIsSet(true);
    return this;
  }

  public void unsetTickDirection() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TICKDIRECTION_ISSET_ID);
  }

  /** Returns true if field tickDirection is set (has been assigned a value) and false otherwise */
  public boolean isSetTickDirection() {
    return EncodingUtils.testBit(__isset_bitfield, __TICKDIRECTION_ISSET_ID);
  }

  public void setTickDirectionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TICKDIRECTION_ISSET_ID, value);
  }

  public double getQuoteCondition() {
    return this.quoteCondition;
  }

  public MarketDataEntry setQuoteCondition(double quoteCondition) {
    this.quoteCondition = quoteCondition;
    setQuoteConditionIsSet(true);
    return this;
  }

  public void unsetQuoteCondition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUOTECONDITION_ISSET_ID);
  }

  /** Returns true if field quoteCondition is set (has been assigned a value) and false otherwise */
  public boolean isSetQuoteCondition() {
    return EncodingUtils.testBit(__isset_bitfield, __QUOTECONDITION_ISSET_ID);
  }

  public void setQuoteConditionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUOTECONDITION_ISSET_ID, value);
  }

  public int getAggressorSide() {
    return this.aggressorSide;
  }

  public MarketDataEntry setAggressorSide(int aggressorSide) {
    this.aggressorSide = aggressorSide;
    setAggressorSideIsSet(true);
    return this;
  }

  public void unsetAggressorSide() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AGGRESSORSIDE_ISSET_ID);
  }

  /** Returns true if field aggressorSide is set (has been assigned a value) and false otherwise */
  public boolean isSetAggressorSide() {
    return EncodingUtils.testBit(__isset_bitfield, __AGGRESSORSIDE_ISSET_ID);
  }

  public void setAggressorSideIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AGGRESSORSIDE_ISSET_ID, value);
  }

  public double getMatchEventIndicator() {
    return this.matchEventIndicator;
  }

  public MarketDataEntry setMatchEventIndicator(double matchEventIndicator) {
    this.matchEventIndicator = matchEventIndicator;
    setMatchEventIndicatorIsSet(true);
    return this;
  }

  public void unsetMatchEventIndicator() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MATCHEVENTINDICATOR_ISSET_ID);
  }

  /** Returns true if field matchEventIndicator is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchEventIndicator() {
    return EncodingUtils.testBit(__isset_bitfield, __MATCHEVENTINDICATOR_ISSET_ID);
  }

  public void setMatchEventIndicatorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MATCHEVENTINDICATOR_ISSET_ID, value);
  }

  public double getDummy1() {
    return this.dummy1;
  }

  public MarketDataEntry setDummy1(double dummy1) {
    this.dummy1 = dummy1;
    setDummy1IsSet(true);
    return this;
  }

  public void unsetDummy1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DUMMY1_ISSET_ID);
  }

  /** Returns true if field dummy1 is set (has been assigned a value) and false otherwise */
  public boolean isSetDummy1() {
    return EncodingUtils.testBit(__isset_bitfield, __DUMMY1_ISSET_ID);
  }

  public void setDummy1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DUMMY1_ISSET_ID, value);
  }

  public int getDummy2() {
    return this.dummy2;
  }

  public MarketDataEntry setDummy2(int dummy2) {
    this.dummy2 = dummy2;
    setDummy2IsSet(true);
    return this;
  }

  public void unsetDummy2() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DUMMY2_ISSET_ID);
  }

  /** Returns true if field dummy2 is set (has been assigned a value) and false otherwise */
  public boolean isSetDummy2() {
    return EncodingUtils.testBit(__isset_bitfield, __DUMMY2_ISSET_ID);
  }

  public void setDummy2IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DUMMY2_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MD_UPDATE_ACTION:
      if (value == null) {
        unsetMdUpdateAction();
      } else {
        setMdUpdateAction((Integer)value);
      }
      break;

    case MD_PRICE_LEVEL:
      if (value == null) {
        unsetMdPriceLevel();
      } else {
        setMdPriceLevel((Integer)value);
      }
      break;

    case MD_ENTRY_TYPE:
      if (value == null) {
        unsetMdEntryType();
      } else {
        setMdEntryType((Double)value);
      }
      break;

    case OPEN_CLOSE_SETTLE_FLAG:
      if (value == null) {
        unsetOpenCloseSettleFlag();
      } else {
        setOpenCloseSettleFlag((Integer)value);
      }
      break;

    case SECURITY_IDSOURCE:
      if (value == null) {
        unsetSecurityIDSource();
      } else {
        setSecurityIDSource((Integer)value);
      }
      break;

    case SECURITY_ID:
      if (value == null) {
        unsetSecurityID();
      } else {
        setSecurityID((Integer)value);
      }
      break;

    case RPT_SEQ:
      if (value == null) {
        unsetRptSeq();
      } else {
        setRptSeq((Integer)value);
      }
      break;

    case MD_ENTRY_PX:
      if (value == null) {
        unsetMdEntryPx();
      } else {
        setMdEntryPx((Double)value);
      }
      break;

    case MD_ENTRY_TIME:
      if (value == null) {
        unsetMdEntryTime();
      } else {
        setMdEntryTime((Integer)value);
      }
      break;

    case MD_ENTRY_SIZE:
      if (value == null) {
        unsetMdEntrySize();
      } else {
        setMdEntrySize((Integer)value);
      }
      break;

    case NUMBER_OF_ORDERS:
      if (value == null) {
        unsetNumberOfOrders();
      } else {
        setNumberOfOrders((Integer)value);
      }
      break;

    case TRADING_SESSION_ID:
      if (value == null) {
        unsetTradingSessionID();
      } else {
        setTradingSessionID((Double)value);
      }
      break;

    case NET_CHG_PREV_DAY:
      if (value == null) {
        unsetNetChgPrevDay();
      } else {
        setNetChgPrevDay((Double)value);
      }
      break;

    case TRADE_VOLUME:
      if (value == null) {
        unsetTradeVolume();
      } else {
        setTradeVolume((Integer)value);
      }
      break;

    case TRADE_CONDITION:
      if (value == null) {
        unsetTradeCondition();
      } else {
        setTradeCondition((Double)value);
      }
      break;

    case TICK_DIRECTION:
      if (value == null) {
        unsetTickDirection();
      } else {
        setTickDirection((Double)value);
      }
      break;

    case QUOTE_CONDITION:
      if (value == null) {
        unsetQuoteCondition();
      } else {
        setQuoteCondition((Double)value);
      }
      break;

    case AGGRESSOR_SIDE:
      if (value == null) {
        unsetAggressorSide();
      } else {
        setAggressorSide((Integer)value);
      }
      break;

    case MATCH_EVENT_INDICATOR:
      if (value == null) {
        unsetMatchEventIndicator();
      } else {
        setMatchEventIndicator((Double)value);
      }
      break;

    case DUMMY1:
      if (value == null) {
        unsetDummy1();
      } else {
        setDummy1((Double)value);
      }
      break;

    case DUMMY2:
      if (value == null) {
        unsetDummy2();
      } else {
        setDummy2((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MD_UPDATE_ACTION:
      return Integer.valueOf(getMdUpdateAction());

    case MD_PRICE_LEVEL:
      return Integer.valueOf(getMdPriceLevel());

    case MD_ENTRY_TYPE:
      return Double.valueOf(getMdEntryType());

    case OPEN_CLOSE_SETTLE_FLAG:
      return Integer.valueOf(getOpenCloseSettleFlag());

    case SECURITY_IDSOURCE:
      return Integer.valueOf(getSecurityIDSource());

    case SECURITY_ID:
      return Integer.valueOf(getSecurityID());

    case RPT_SEQ:
      return Integer.valueOf(getRptSeq());

    case MD_ENTRY_PX:
      return Double.valueOf(getMdEntryPx());

    case MD_ENTRY_TIME:
      return Integer.valueOf(getMdEntryTime());

    case MD_ENTRY_SIZE:
      return Integer.valueOf(getMdEntrySize());

    case NUMBER_OF_ORDERS:
      return Integer.valueOf(getNumberOfOrders());

    case TRADING_SESSION_ID:
      return Double.valueOf(getTradingSessionID());

    case NET_CHG_PREV_DAY:
      return Double.valueOf(getNetChgPrevDay());

    case TRADE_VOLUME:
      return Integer.valueOf(getTradeVolume());

    case TRADE_CONDITION:
      return Double.valueOf(getTradeCondition());

    case TICK_DIRECTION:
      return Double.valueOf(getTickDirection());

    case QUOTE_CONDITION:
      return Double.valueOf(getQuoteCondition());

    case AGGRESSOR_SIDE:
      return Integer.valueOf(getAggressorSide());

    case MATCH_EVENT_INDICATOR:
      return Double.valueOf(getMatchEventIndicator());

    case DUMMY1:
      return Double.valueOf(getDummy1());

    case DUMMY2:
      return Integer.valueOf(getDummy2());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MD_UPDATE_ACTION:
      return isSetMdUpdateAction();
    case MD_PRICE_LEVEL:
      return isSetMdPriceLevel();
    case MD_ENTRY_TYPE:
      return isSetMdEntryType();
    case OPEN_CLOSE_SETTLE_FLAG:
      return isSetOpenCloseSettleFlag();
    case SECURITY_IDSOURCE:
      return isSetSecurityIDSource();
    case SECURITY_ID:
      return isSetSecurityID();
    case RPT_SEQ:
      return isSetRptSeq();
    case MD_ENTRY_PX:
      return isSetMdEntryPx();
    case MD_ENTRY_TIME:
      return isSetMdEntryTime();
    case MD_ENTRY_SIZE:
      return isSetMdEntrySize();
    case NUMBER_OF_ORDERS:
      return isSetNumberOfOrders();
    case TRADING_SESSION_ID:
      return isSetTradingSessionID();
    case NET_CHG_PREV_DAY:
      return isSetNetChgPrevDay();
    case TRADE_VOLUME:
      return isSetTradeVolume();
    case TRADE_CONDITION:
      return isSetTradeCondition();
    case TICK_DIRECTION:
      return isSetTickDirection();
    case QUOTE_CONDITION:
      return isSetQuoteCondition();
    case AGGRESSOR_SIDE:
      return isSetAggressorSide();
    case MATCH_EVENT_INDICATOR:
      return isSetMatchEventIndicator();
    case DUMMY1:
      return isSetDummy1();
    case DUMMY2:
      return isSetDummy2();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MarketDataEntry)
      return this.equals((MarketDataEntry)that);
    return false;
  }

  public boolean equals(MarketDataEntry that) {
    if (that == null)
      return false;

    boolean this_present_mdUpdateAction = true;
    boolean that_present_mdUpdateAction = true;
    if (this_present_mdUpdateAction || that_present_mdUpdateAction) {
      if (!(this_present_mdUpdateAction && that_present_mdUpdateAction))
        return false;
      if (this.mdUpdateAction != that.mdUpdateAction)
        return false;
    }

    boolean this_present_mdPriceLevel = true;
    boolean that_present_mdPriceLevel = true;
    if (this_present_mdPriceLevel || that_present_mdPriceLevel) {
      if (!(this_present_mdPriceLevel && that_present_mdPriceLevel))
        return false;
      if (this.mdPriceLevel != that.mdPriceLevel)
        return false;
    }

    boolean this_present_mdEntryType = true;
    boolean that_present_mdEntryType = true;
    if (this_present_mdEntryType || that_present_mdEntryType) {
      if (!(this_present_mdEntryType && that_present_mdEntryType))
        return false;
      if (this.mdEntryType != that.mdEntryType)
        return false;
    }

    boolean this_present_openCloseSettleFlag = true;
    boolean that_present_openCloseSettleFlag = true;
    if (this_present_openCloseSettleFlag || that_present_openCloseSettleFlag) {
      if (!(this_present_openCloseSettleFlag && that_present_openCloseSettleFlag))
        return false;
      if (this.openCloseSettleFlag != that.openCloseSettleFlag)
        return false;
    }

    boolean this_present_securityIDSource = true;
    boolean that_present_securityIDSource = true;
    if (this_present_securityIDSource || that_present_securityIDSource) {
      if (!(this_present_securityIDSource && that_present_securityIDSource))
        return false;
      if (this.securityIDSource != that.securityIDSource)
        return false;
    }

    boolean this_present_securityID = true;
    boolean that_present_securityID = true;
    if (this_present_securityID || that_present_securityID) {
      if (!(this_present_securityID && that_present_securityID))
        return false;
      if (this.securityID != that.securityID)
        return false;
    }

    boolean this_present_rptSeq = true;
    boolean that_present_rptSeq = true;
    if (this_present_rptSeq || that_present_rptSeq) {
      if (!(this_present_rptSeq && that_present_rptSeq))
        return false;
      if (this.rptSeq != that.rptSeq)
        return false;
    }

    boolean this_present_mdEntryPx = true;
    boolean that_present_mdEntryPx = true;
    if (this_present_mdEntryPx || that_present_mdEntryPx) {
      if (!(this_present_mdEntryPx && that_present_mdEntryPx))
        return false;
      if (this.mdEntryPx != that.mdEntryPx)
        return false;
    }

    boolean this_present_mdEntryTime = true;
    boolean that_present_mdEntryTime = true;
    if (this_present_mdEntryTime || that_present_mdEntryTime) {
      if (!(this_present_mdEntryTime && that_present_mdEntryTime))
        return false;
      if (this.mdEntryTime != that.mdEntryTime)
        return false;
    }

    boolean this_present_mdEntrySize = true;
    boolean that_present_mdEntrySize = true;
    if (this_present_mdEntrySize || that_present_mdEntrySize) {
      if (!(this_present_mdEntrySize && that_present_mdEntrySize))
        return false;
      if (this.mdEntrySize != that.mdEntrySize)
        return false;
    }

    boolean this_present_numberOfOrders = true;
    boolean that_present_numberOfOrders = true;
    if (this_present_numberOfOrders || that_present_numberOfOrders) {
      if (!(this_present_numberOfOrders && that_present_numberOfOrders))
        return false;
      if (this.numberOfOrders != that.numberOfOrders)
        return false;
    }

    boolean this_present_tradingSessionID = true;
    boolean that_present_tradingSessionID = true;
    if (this_present_tradingSessionID || that_present_tradingSessionID) {
      if (!(this_present_tradingSessionID && that_present_tradingSessionID))
        return false;
      if (this.tradingSessionID != that.tradingSessionID)
        return false;
    }

    boolean this_present_netChgPrevDay = true;
    boolean that_present_netChgPrevDay = true;
    if (this_present_netChgPrevDay || that_present_netChgPrevDay) {
      if (!(this_present_netChgPrevDay && that_present_netChgPrevDay))
        return false;
      if (this.netChgPrevDay != that.netChgPrevDay)
        return false;
    }

    boolean this_present_tradeVolume = true;
    boolean that_present_tradeVolume = true;
    if (this_present_tradeVolume || that_present_tradeVolume) {
      if (!(this_present_tradeVolume && that_present_tradeVolume))
        return false;
      if (this.tradeVolume != that.tradeVolume)
        return false;
    }

    boolean this_present_tradeCondition = true;
    boolean that_present_tradeCondition = true;
    if (this_present_tradeCondition || that_present_tradeCondition) {
      if (!(this_present_tradeCondition && that_present_tradeCondition))
        return false;
      if (this.tradeCondition != that.tradeCondition)
        return false;
    }

    boolean this_present_tickDirection = true;
    boolean that_present_tickDirection = true;
    if (this_present_tickDirection || that_present_tickDirection) {
      if (!(this_present_tickDirection && that_present_tickDirection))
        return false;
      if (this.tickDirection != that.tickDirection)
        return false;
    }

    boolean this_present_quoteCondition = true;
    boolean that_present_quoteCondition = true;
    if (this_present_quoteCondition || that_present_quoteCondition) {
      if (!(this_present_quoteCondition && that_present_quoteCondition))
        return false;
      if (this.quoteCondition != that.quoteCondition)
        return false;
    }

    boolean this_present_aggressorSide = true;
    boolean that_present_aggressorSide = true;
    if (this_present_aggressorSide || that_present_aggressorSide) {
      if (!(this_present_aggressorSide && that_present_aggressorSide))
        return false;
      if (this.aggressorSide != that.aggressorSide)
        return false;
    }

    boolean this_present_matchEventIndicator = true;
    boolean that_present_matchEventIndicator = true;
    if (this_present_matchEventIndicator || that_present_matchEventIndicator) {
      if (!(this_present_matchEventIndicator && that_present_matchEventIndicator))
        return false;
      if (this.matchEventIndicator != that.matchEventIndicator)
        return false;
    }

    boolean this_present_dummy1 = true;
    boolean that_present_dummy1 = true;
    if (this_present_dummy1 || that_present_dummy1) {
      if (!(this_present_dummy1 && that_present_dummy1))
        return false;
      if (this.dummy1 != that.dummy1)
        return false;
    }

    boolean this_present_dummy2 = true;
    boolean that_present_dummy2 = true;
    if (this_present_dummy2 || that_present_dummy2) {
      if (!(this_present_dummy2 && that_present_dummy2))
        return false;
      if (this.dummy2 != that.dummy2)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(MarketDataEntry other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMdUpdateAction()).compareTo(other.isSetMdUpdateAction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMdUpdateAction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mdUpdateAction, other.mdUpdateAction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMdPriceLevel()).compareTo(other.isSetMdPriceLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMdPriceLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mdPriceLevel, other.mdPriceLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMdEntryType()).compareTo(other.isSetMdEntryType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMdEntryType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mdEntryType, other.mdEntryType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenCloseSettleFlag()).compareTo(other.isSetOpenCloseSettleFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenCloseSettleFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openCloseSettleFlag, other.openCloseSettleFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecurityIDSource()).compareTo(other.isSetSecurityIDSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecurityIDSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.securityIDSource, other.securityIDSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecurityID()).compareTo(other.isSetSecurityID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecurityID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.securityID, other.securityID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRptSeq()).compareTo(other.isSetRptSeq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRptSeq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rptSeq, other.rptSeq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMdEntryPx()).compareTo(other.isSetMdEntryPx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMdEntryPx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mdEntryPx, other.mdEntryPx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMdEntryTime()).compareTo(other.isSetMdEntryTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMdEntryTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mdEntryTime, other.mdEntryTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMdEntrySize()).compareTo(other.isSetMdEntrySize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMdEntrySize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mdEntrySize, other.mdEntrySize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumberOfOrders()).compareTo(other.isSetNumberOfOrders());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumberOfOrders()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberOfOrders, other.numberOfOrders);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradingSessionID()).compareTo(other.isSetTradingSessionID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradingSessionID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradingSessionID, other.tradingSessionID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNetChgPrevDay()).compareTo(other.isSetNetChgPrevDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNetChgPrevDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.netChgPrevDay, other.netChgPrevDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeVolume()).compareTo(other.isSetTradeVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeVolume, other.tradeVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeCondition()).compareTo(other.isSetTradeCondition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeCondition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeCondition, other.tradeCondition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTickDirection()).compareTo(other.isSetTickDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTickDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tickDirection, other.tickDirection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuoteCondition()).compareTo(other.isSetQuoteCondition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuoteCondition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quoteCondition, other.quoteCondition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAggressorSide()).compareTo(other.isSetAggressorSide());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAggressorSide()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggressorSide, other.aggressorSide);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchEventIndicator()).compareTo(other.isSetMatchEventIndicator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchEventIndicator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchEventIndicator, other.matchEventIndicator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDummy1()).compareTo(other.isSetDummy1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDummy1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dummy1, other.dummy1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDummy2()).compareTo(other.isSetDummy2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDummy2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dummy2, other.dummy2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MarketDataEntry(");
    boolean first = true;

    sb.append("mdUpdateAction:");
    sb.append(this.mdUpdateAction);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mdPriceLevel:");
    sb.append(this.mdPriceLevel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mdEntryType:");
    sb.append(this.mdEntryType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("openCloseSettleFlag:");
    sb.append(this.openCloseSettleFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("securityIDSource:");
    sb.append(this.securityIDSource);
    first = false;
    if (!first) sb.append(", ");
    sb.append("securityID:");
    sb.append(this.securityID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rptSeq:");
    sb.append(this.rptSeq);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mdEntryPx:");
    sb.append(this.mdEntryPx);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mdEntryTime:");
    sb.append(this.mdEntryTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mdEntrySize:");
    sb.append(this.mdEntrySize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numberOfOrders:");
    sb.append(this.numberOfOrders);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradingSessionID:");
    sb.append(this.tradingSessionID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("netChgPrevDay:");
    sb.append(this.netChgPrevDay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeVolume:");
    sb.append(this.tradeVolume);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeCondition:");
    sb.append(this.tradeCondition);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tickDirection:");
    sb.append(this.tickDirection);
    first = false;
    if (!first) sb.append(", ");
    sb.append("quoteCondition:");
    sb.append(this.quoteCondition);
    first = false;
    if (!first) sb.append(", ");
    sb.append("aggressorSide:");
    sb.append(this.aggressorSide);
    first = false;
    if (!first) sb.append(", ");
    sb.append("matchEventIndicator:");
    sb.append(this.matchEventIndicator);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dummy1:");
    sb.append(this.dummy1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dummy2:");
    sb.append(this.dummy2);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MarketDataEntryStandardSchemeFactory implements SchemeFactory {
    public MarketDataEntryStandardScheme getScheme() {
      return new MarketDataEntryStandardScheme();
    }
  }

  private static class MarketDataEntryStandardScheme extends StandardScheme<MarketDataEntry> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MarketDataEntry struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MD_UPDATE_ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mdUpdateAction = iprot.readI32();
              struct.setMdUpdateActionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MD_PRICE_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mdPriceLevel = iprot.readI32();
              struct.setMdPriceLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MD_ENTRY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.mdEntryType = iprot.readDouble();
              struct.setMdEntryTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OPEN_CLOSE_SETTLE_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.openCloseSettleFlag = iprot.readI32();
              struct.setOpenCloseSettleFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SECURITY_IDSOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.securityIDSource = iprot.readI32();
              struct.setSecurityIDSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SECURITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.securityID = iprot.readI32();
              struct.setSecurityIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RPT_SEQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rptSeq = iprot.readI32();
              struct.setRptSeqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MD_ENTRY_PX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.mdEntryPx = iprot.readDouble();
              struct.setMdEntryPxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MD_ENTRY_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mdEntryTime = iprot.readI32();
              struct.setMdEntryTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MD_ENTRY_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mdEntrySize = iprot.readI32();
              struct.setMdEntrySizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // NUMBER_OF_ORDERS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numberOfOrders = iprot.readI32();
              struct.setNumberOfOrdersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TRADING_SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.tradingSessionID = iprot.readDouble();
              struct.setTradingSessionIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // NET_CHG_PREV_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.netChgPrevDay = iprot.readDouble();
              struct.setNetChgPrevDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // TRADE_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tradeVolume = iprot.readI32();
              struct.setTradeVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TRADE_CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.tradeCondition = iprot.readDouble();
              struct.setTradeConditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TICK_DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.tickDirection = iprot.readDouble();
              struct.setTickDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // QUOTE_CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.quoteCondition = iprot.readDouble();
              struct.setQuoteConditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // AGGRESSOR_SIDE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.aggressorSide = iprot.readI32();
              struct.setAggressorSideIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // MATCH_EVENT_INDICATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.matchEventIndicator = iprot.readDouble();
              struct.setMatchEventIndicatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // DUMMY1
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dummy1 = iprot.readDouble();
              struct.setDummy1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // DUMMY2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dummy2 = iprot.readI32();
              struct.setDummy2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MarketDataEntry struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MD_UPDATE_ACTION_FIELD_DESC);
      oprot.writeI32(struct.mdUpdateAction);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MD_PRICE_LEVEL_FIELD_DESC);
      oprot.writeI32(struct.mdPriceLevel);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MD_ENTRY_TYPE_FIELD_DESC);
      oprot.writeDouble(struct.mdEntryType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OPEN_CLOSE_SETTLE_FLAG_FIELD_DESC);
      oprot.writeI32(struct.openCloseSettleFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SECURITY_IDSOURCE_FIELD_DESC);
      oprot.writeI32(struct.securityIDSource);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SECURITY_ID_FIELD_DESC);
      oprot.writeI32(struct.securityID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RPT_SEQ_FIELD_DESC);
      oprot.writeI32(struct.rptSeq);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MD_ENTRY_PX_FIELD_DESC);
      oprot.writeDouble(struct.mdEntryPx);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MD_ENTRY_TIME_FIELD_DESC);
      oprot.writeI32(struct.mdEntryTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MD_ENTRY_SIZE_FIELD_DESC);
      oprot.writeI32(struct.mdEntrySize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER_OF_ORDERS_FIELD_DESC);
      oprot.writeI32(struct.numberOfOrders);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRADING_SESSION_ID_FIELD_DESC);
      oprot.writeDouble(struct.tradingSessionID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NET_CHG_PREV_DAY_FIELD_DESC);
      oprot.writeDouble(struct.netChgPrevDay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRADE_VOLUME_FIELD_DESC);
      oprot.writeI32(struct.tradeVolume);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRADE_CONDITION_FIELD_DESC);
      oprot.writeDouble(struct.tradeCondition);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TICK_DIRECTION_FIELD_DESC);
      oprot.writeDouble(struct.tickDirection);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUOTE_CONDITION_FIELD_DESC);
      oprot.writeDouble(struct.quoteCondition);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AGGRESSOR_SIDE_FIELD_DESC);
      oprot.writeI32(struct.aggressorSide);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MATCH_EVENT_INDICATOR_FIELD_DESC);
      oprot.writeDouble(struct.matchEventIndicator);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DUMMY1_FIELD_DESC);
      oprot.writeDouble(struct.dummy1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DUMMY2_FIELD_DESC);
      oprot.writeI32(struct.dummy2);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MarketDataEntryTupleSchemeFactory implements SchemeFactory {
    public MarketDataEntryTupleScheme getScheme() {
      return new MarketDataEntryTupleScheme();
    }
  }

  private static class MarketDataEntryTupleScheme extends TupleScheme<MarketDataEntry> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MarketDataEntry struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMdUpdateAction()) {
        optionals.set(0);
      }
      if (struct.isSetMdPriceLevel()) {
        optionals.set(1);
      }
      if (struct.isSetMdEntryType()) {
        optionals.set(2);
      }
      if (struct.isSetOpenCloseSettleFlag()) {
        optionals.set(3);
      }
      if (struct.isSetSecurityIDSource()) {
        optionals.set(4);
      }
      if (struct.isSetSecurityID()) {
        optionals.set(5);
      }
      if (struct.isSetRptSeq()) {
        optionals.set(6);
      }
      if (struct.isSetMdEntryPx()) {
        optionals.set(7);
      }
      if (struct.isSetMdEntryTime()) {
        optionals.set(8);
      }
      if (struct.isSetMdEntrySize()) {
        optionals.set(9);
      }
      if (struct.isSetNumberOfOrders()) {
        optionals.set(10);
      }
      if (struct.isSetTradingSessionID()) {
        optionals.set(11);
      }
      if (struct.isSetNetChgPrevDay()) {
        optionals.set(12);
      }
      if (struct.isSetTradeVolume()) {
        optionals.set(13);
      }
      if (struct.isSetTradeCondition()) {
        optionals.set(14);
      }
      if (struct.isSetTickDirection()) {
        optionals.set(15);
      }
      if (struct.isSetQuoteCondition()) {
        optionals.set(16);
      }
      if (struct.isSetAggressorSide()) {
        optionals.set(17);
      }
      if (struct.isSetMatchEventIndicator()) {
        optionals.set(18);
      }
      if (struct.isSetDummy1()) {
        optionals.set(19);
      }
      if (struct.isSetDummy2()) {
        optionals.set(20);
      }
      oprot.writeBitSet(optionals, 21);
      if (struct.isSetMdUpdateAction()) {
        oprot.writeI32(struct.mdUpdateAction);
      }
      if (struct.isSetMdPriceLevel()) {
        oprot.writeI32(struct.mdPriceLevel);
      }
      if (struct.isSetMdEntryType()) {
        oprot.writeDouble(struct.mdEntryType);
      }
      if (struct.isSetOpenCloseSettleFlag()) {
        oprot.writeI32(struct.openCloseSettleFlag);
      }
      if (struct.isSetSecurityIDSource()) {
        oprot.writeI32(struct.securityIDSource);
      }
      if (struct.isSetSecurityID()) {
        oprot.writeI32(struct.securityID);
      }
      if (struct.isSetRptSeq()) {
        oprot.writeI32(struct.rptSeq);
      }
      if (struct.isSetMdEntryPx()) {
        oprot.writeDouble(struct.mdEntryPx);
      }
      if (struct.isSetMdEntryTime()) {
        oprot.writeI32(struct.mdEntryTime);
      }
      if (struct.isSetMdEntrySize()) {
        oprot.writeI32(struct.mdEntrySize);
      }
      if (struct.isSetNumberOfOrders()) {
        oprot.writeI32(struct.numberOfOrders);
      }
      if (struct.isSetTradingSessionID()) {
        oprot.writeDouble(struct.tradingSessionID);
      }
      if (struct.isSetNetChgPrevDay()) {
        oprot.writeDouble(struct.netChgPrevDay);
      }
      if (struct.isSetTradeVolume()) {
        oprot.writeI32(struct.tradeVolume);
      }
      if (struct.isSetTradeCondition()) {
        oprot.writeDouble(struct.tradeCondition);
      }
      if (struct.isSetTickDirection()) {
        oprot.writeDouble(struct.tickDirection);
      }
      if (struct.isSetQuoteCondition()) {
        oprot.writeDouble(struct.quoteCondition);
      }
      if (struct.isSetAggressorSide()) {
        oprot.writeI32(struct.aggressorSide);
      }
      if (struct.isSetMatchEventIndicator()) {
        oprot.writeDouble(struct.matchEventIndicator);
      }
      if (struct.isSetDummy1()) {
        oprot.writeDouble(struct.dummy1);
      }
      if (struct.isSetDummy2()) {
        oprot.writeI32(struct.dummy2);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MarketDataEntry struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(21);
      if (incoming.get(0)) {
        struct.mdUpdateAction = iprot.readI32();
        struct.setMdUpdateActionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.mdPriceLevel = iprot.readI32();
        struct.setMdPriceLevelIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mdEntryType = iprot.readDouble();
        struct.setMdEntryTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.openCloseSettleFlag = iprot.readI32();
        struct.setOpenCloseSettleFlagIsSet(true);
      }
      if (incoming.get(4)) {
        struct.securityIDSource = iprot.readI32();
        struct.setSecurityIDSourceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.securityID = iprot.readI32();
        struct.setSecurityIDIsSet(true);
      }
      if (incoming.get(6)) {
        struct.rptSeq = iprot.readI32();
        struct.setRptSeqIsSet(true);
      }
      if (incoming.get(7)) {
        struct.mdEntryPx = iprot.readDouble();
        struct.setMdEntryPxIsSet(true);
      }
      if (incoming.get(8)) {
        struct.mdEntryTime = iprot.readI32();
        struct.setMdEntryTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.mdEntrySize = iprot.readI32();
        struct.setMdEntrySizeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.numberOfOrders = iprot.readI32();
        struct.setNumberOfOrdersIsSet(true);
      }
      if (incoming.get(11)) {
        struct.tradingSessionID = iprot.readDouble();
        struct.setTradingSessionIDIsSet(true);
      }
      if (incoming.get(12)) {
        struct.netChgPrevDay = iprot.readDouble();
        struct.setNetChgPrevDayIsSet(true);
      }
      if (incoming.get(13)) {
        struct.tradeVolume = iprot.readI32();
        struct.setTradeVolumeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.tradeCondition = iprot.readDouble();
        struct.setTradeConditionIsSet(true);
      }
      if (incoming.get(15)) {
        struct.tickDirection = iprot.readDouble();
        struct.setTickDirectionIsSet(true);
      }
      if (incoming.get(16)) {
        struct.quoteCondition = iprot.readDouble();
        struct.setQuoteConditionIsSet(true);
      }
      if (incoming.get(17)) {
        struct.aggressorSide = iprot.readI32();
        struct.setAggressorSideIsSet(true);
      }
      if (incoming.get(18)) {
        struct.matchEventIndicator = iprot.readDouble();
        struct.setMatchEventIndicatorIsSet(true);
      }
      if (incoming.get(19)) {
        struct.dummy1 = iprot.readDouble();
        struct.setDummy1IsSet(true);
      }
      if (incoming.get(20)) {
        struct.dummy2 = iprot.readI32();
        struct.setDummy2IsSet(true);
      }
    }
  }

}

