// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `benchmark.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package dfki.sb.zerociceproject.Main;

public class RelatedSym implements java.lang.Cloneable, java.io.Serializable
{
    public double symbol;

    public long orderQuantity;

    public int side;

    public long transactTime;

    public int quoteType;

    public int securityID;

    public int securityIDSource;

    public double dummy1;

    public int dummy2;

    public RelatedSym()
    {
    }

    public RelatedSym(double symbol, long orderQuantity, int side, long transactTime, int quoteType, int securityID, int securityIDSource, double dummy1, int dummy2)
    {
        this.symbol = symbol;
        this.orderQuantity = orderQuantity;
        this.side = side;
        this.transactTime = transactTime;
        this.quoteType = quoteType;
        this.securityID = securityID;
        this.securityIDSource = securityIDSource;
        this.dummy1 = dummy1;
        this.dummy2 = dummy2;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        RelatedSym _r = null;
        if(rhs instanceof RelatedSym)
        {
            _r = (RelatedSym)rhs;
        }

        if(_r != null)
        {
            if(symbol != _r.symbol)
            {
                return false;
            }
            if(orderQuantity != _r.orderQuantity)
            {
                return false;
            }
            if(side != _r.side)
            {
                return false;
            }
            if(transactTime != _r.transactTime)
            {
                return false;
            }
            if(quoteType != _r.quoteType)
            {
                return false;
            }
            if(securityID != _r.securityID)
            {
                return false;
            }
            if(securityIDSource != _r.securityIDSource)
            {
                return false;
            }
            if(dummy1 != _r.dummy1)
            {
                return false;
            }
            if(dummy2 != _r.dummy2)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::Main::RelatedSym");
        __h = IceInternal.HashUtil.hashAdd(__h, symbol);
        __h = IceInternal.HashUtil.hashAdd(__h, orderQuantity);
        __h = IceInternal.HashUtil.hashAdd(__h, side);
        __h = IceInternal.HashUtil.hashAdd(__h, transactTime);
        __h = IceInternal.HashUtil.hashAdd(__h, quoteType);
        __h = IceInternal.HashUtil.hashAdd(__h, securityID);
        __h = IceInternal.HashUtil.hashAdd(__h, securityIDSource);
        __h = IceInternal.HashUtil.hashAdd(__h, dummy1);
        __h = IceInternal.HashUtil.hashAdd(__h, dummy2);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeDouble(symbol);
        __os.writeLong(orderQuantity);
        __os.writeInt(side);
        __os.writeLong(transactTime);
        __os.writeInt(quoteType);
        __os.writeInt(securityID);
        __os.writeInt(securityIDSource);
        __os.writeDouble(dummy1);
        __os.writeInt(dummy2);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        symbol = __is.readDouble();
        orderQuantity = __is.readLong();
        side = __is.readInt();
        transactTime = __is.readLong();
        quoteType = __is.readInt();
        securityID = __is.readInt();
        securityIDSource = __is.readInt();
        dummy1 = __is.readDouble();
        dummy2 = __is.readInt();
    }

    public static final long serialVersionUID = -390377342L;
}
